{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/@controllers/answer.controller.ts","webpack:///./src/@controllers/comment.controller.ts","webpack:///./src/@controllers/company.controller.ts","webpack:///./src/@controllers/issue.controller.ts","webpack:///./src/@controllers/project.controller.ts","webpack:///./src/@controllers/question.controller.ts","webpack:///./src/@controllers/task.controller.ts","webpack:///./src/@controllers/user.controller.ts","webpack:///./src/@repository/concrete/abstract-status.repository.ts","webpack:///./src/@repository/concrete/answer.repository.ts","webpack:///./src/@repository/concrete/base/repository.base.ts","webpack:///./src/@repository/concrete/comment.repository.ts","webpack:///./src/@repository/concrete/company-membership.repository.ts","webpack:///./src/@repository/concrete/company.repository.ts","webpack:///./src/@repository/concrete/index.ts","webpack:///./src/@repository/concrete/issue.repository.ts","webpack:///./src/@repository/concrete/label.repository.ts","webpack:///./src/@repository/concrete/membership-request.repository.ts","webpack:///./src/@repository/concrete/project-manager.repository.ts","webpack:///./src/@repository/concrete/project-membership.repository.ts","webpack:///./src/@repository/concrete/project.repository.ts","webpack:///./src/@repository/concrete/question.repository.ts","webpack:///./src/@repository/concrete/status-template.repository.ts","webpack:///./src/@repository/concrete/status.repository.ts","webpack:///./src/@repository/concrete/task-assignment.repository.ts","webpack:///./src/@repository/concrete/task-label.repository.ts","webpack:///./src/@repository/concrete/task.repository.ts","webpack:///./src/@repository/concrete/user.repository.ts","webpack:///./src/@repository/uow.ts","webpack:///./src/@routes/answer.routes.ts","webpack:///./src/@routes/comment.routes.ts","webpack:///./src/@routes/company.routes.ts","webpack:///./src/@routes/index.ts","webpack:///./src/@routes/issue.routes.ts","webpack:///./src/@routes/project.routes.ts","webpack:///./src/@routes/question.routes.ts","webpack:///./src/@routes/task.routes.ts","webpack:///./src/@routes/user.routes.ts","webpack:///./src/@services/concrete/answer.service.ts","webpack:///./src/@services/concrete/comment.service.ts","webpack:///./src/@services/concrete/company.service.ts","webpack:///./src/@services/concrete/index.ts","webpack:///./src/@services/concrete/issue.service.ts","webpack:///./src/@services/concrete/project.service.ts","webpack:///./src/@services/concrete/question.service.ts","webpack:///./src/@services/concrete/task.service.ts","webpack:///./src/@services/concrete/user.service.ts","webpack:///./src/_models/dtos/abstract-status/abstract-status-create.dto.ts","webpack:///./src/_models/dtos/answer/answer-create.dto.ts","webpack:///./src/_models/dtos/answer/answer-detail.dto.ts","webpack:///./src/_models/dtos/answer/answer-list.dto.ts","webpack:///./src/_models/dtos/answer/answer-summary.dto.ts","webpack:///./src/_models/dtos/answer/answer-update.dto.ts","webpack:///./src/_models/dtos/comment/comment-create.dto.ts","webpack:///./src/_models/dtos/comment/comment-detail.dto.ts","webpack:///./src/_models/dtos/comment/comment-list.dto.ts","webpack:///./src/_models/dtos/comment/comment-summary.dto.ts","webpack:///./src/_models/dtos/comment/comment-update.dto.ts","webpack:///./src/_models/dtos/company/company-create.dto.ts","webpack:///./src/_models/dtos/company/company-detail.dto.ts","webpack:///./src/_models/dtos/company/company-list.dto.ts","webpack:///./src/_models/dtos/company/company-summary.dto.ts","webpack:///./src/_models/dtos/company/company-update.dto.ts","webpack:///./src/_models/dtos/company/company-user-register.dto.ts","webpack:///./src/_models/dtos/index.ts","webpack:///./src/_models/dtos/issue/issue-create.dto.ts","webpack:///./src/_models/dtos/issue/issue-detail.dto.ts","webpack:///./src/_models/dtos/issue/issue-list.dto.ts","webpack:///./src/_models/dtos/issue/issue-summary.dto.ts","webpack:///./src/_models/dtos/issue/issue-update.dto.ts","webpack:///./src/_models/dtos/project/project-assign-manager.dto.ts","webpack:///./src/_models/dtos/project/project-create.dto.ts","webpack:///./src/_models/dtos/project/project-detail.dto.ts","webpack:///./src/_models/dtos/project/project-list.dto.ts","webpack:///./src/_models/dtos/project/project-summary.dto.ts","webpack:///./src/_models/dtos/project/project-update.dto.ts","webpack:///./src/_models/dtos/project/project-user-register.dto.ts","webpack:///./src/_models/dtos/question/question-create.dto.ts","webpack:///./src/_models/dtos/question/question-detail.dto.ts","webpack:///./src/_models/dtos/question/question-list.dto.ts","webpack:///./src/_models/dtos/question/question-summary.dto.ts","webpack:///./src/_models/dtos/question/question-update.dto.ts","webpack:///./src/_models/dtos/status-template/add-status-template.dto.ts","webpack:///./src/_models/dtos/status/status-summary.dto.ts","webpack:///./src/_models/dtos/task/task-create.dto.ts","webpack:///./src/_models/dtos/task/task-detail.dto.ts","webpack:///./src/_models/dtos/task/task-list.dto.ts","webpack:///./src/_models/dtos/task/task-status-update.dto.ts","webpack:///./src/_models/dtos/task/task-summary.dto.ts","webpack:///./src/_models/dtos/task/task-update.dto.ts","webpack:///./src/_models/dtos/user/login.dto.model.ts","webpack:///./src/_models/dtos/user/register.dto.ts","webpack:///./src/_models/dtos/user/user-summary.dto.ts","webpack:///./src/_models/project-tree.ts","webpack:///./src/app.ts","webpack:///./src/common/app-config.ts","webpack:///./src/entities/abstract-status.entity.ts","webpack:///./src/entities/answer.entity.ts","webpack:///./src/entities/comment.entity.ts","webpack:///./src/entities/company-membership.entity.ts","webpack:///./src/entities/company.entity.ts","webpack:///./src/entities/issue.entity.ts","webpack:///./src/entities/label.entity.ts","webpack:///./src/entities/membership-request.entity.ts","webpack:///./src/entities/project-manager.entity.ts","webpack:///./src/entities/project-membership.entity.ts","webpack:///./src/entities/project.entity.ts","webpack:///./src/entities/question.entity.ts","webpack:///./src/entities/status-template.entity.ts","webpack:///./src/entities/status.entity.ts","webpack:///./src/entities/task-assignment.entity.ts","webpack:///./src/entities/task-label.entity.ts","webpack:///./src/entities/task.entity.ts","webpack:///./src/entities/user.entity.ts","webpack:///./src/errors/app-error.ts","webpack:///./src/errors/error-handler.ts","webpack:///./src/helpers/index.ts","webpack:///./src/index.ts","webpack:///./src/ioc/index.ts","webpack:///./src/ioc/inject-types.ts","webpack:///./src/ioc/ioc.config.ts","webpack:///./src/middlewares/authorize.middleware.ts","webpack:///./src/middlewares/index.ts","webpack:///./src/middlewares/validation.middleware.ts","webpack:///external \"body-parser\"","webpack:///external \"class-transformer\"","webpack:///external \"class-validator\"","webpack:///external \"compression\"","webpack:///external \"config\"","webpack:///external \"cors\"","webpack:///external \"errorhandler\"","webpack:///external \"express\"","webpack:///external \"express-status-monitor\"","webpack:///external \"helmet\"","webpack:///external \"inversify\"","webpack:///external \"jsonwebtoken\"","webpack:///external \"lodash\"","webpack:///external \"method-override\"","webpack:///external \"module-alias/register\"","webpack:///external \"morgan\"","webpack:///external \"path\"","webpack:///external \"reflect-metadata\"","webpack:///external \"typeorm\""],"names":[],"mappings":"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","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.ts\");\n","import { injectable, inject } from \"inversify\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { AnswerCreateDto, AnswerUpdateDto } from \"@models/dtos\";\r\nimport { IAnswerService } from \"@services/abstract\";\r\nimport { AnswerFilter } from \"@models/filters/answer-filter\";\r\nimport { ErrorHandler } from \"@errors/error-handler\";\r\nimport { InjectTypes } from \"@ioc/inject-types\";\r\n\r\n@injectable()\r\nexport class AnswerController {\r\n\r\n    constructor(\r\n        @inject(InjectTypes.Service.ANSWER) private readonly _answerService: IAnswerService\r\n    ) { }\r\n    list(req: Request, res: Response, next: NextFunction) {\r\n\r\n        let filters: AnswerFilter = {};\r\n\r\n        this._answerService.list(filters, req.decoded.id).then((result) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'list', 'AnswerController');\r\n        });\r\n    }\r\n\r\n    insert(req: Request, res: Response, next: NextFunction) {\r\n\r\n        let ansDto: AnswerCreateDto = Object.assign(new AnswerCreateDto(), req.body);\r\n        ansDto.creatorId = req.decoded.id;\r\n        this._answerService.add(ansDto).then((createdId) => {\r\n            return this._answerService.find(createdId, req.decoded.id);\r\n        }).then((result) => {\r\n            return res.status(201).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'insert', 'AnswerController');\r\n        });\r\n    }\r\n\r\n    find(req: Request, res: Response, next: NextFunction) {\r\n        const id: number = +req.params.id;\r\n        this._answerService.find(id, req.decoded.id).then((result) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'find', 'AnswerController');\r\n        });\r\n    }\r\n\r\n    update(req: Request, res: Response, next: NextFunction) {\r\n        const id: number = req.params.id;\r\n        const ansDto: AnswerUpdateDto = Object.assign(new AnswerCreateDto(), req.body);\r\n        this._answerService.update(id, ansDto, req.decoded.id).then((result) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'update', 'AnswerController');\r\n        });\r\n    }\r\n\r\n    delete(req: Request, res: Response, next: NextFunction) {\r\n        const id: number = +req.params.id;\r\n        this._answerService.delete(id, req.decoded.id).then(() => {\r\n            return res.status(200).json({\r\n                success: true\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'delete', 'AnswerController');\r\n        });\r\n    }\r\n}\r\n","import { injectable, inject } from \"inversify\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { CommentCreateDto, CommentUpdateDto } from \"@models/dtos\";\r\nimport { ICommentService } from \"@services/abstract\";\r\nimport { CommentFilter } from \"@models/filters/comment-filter\";\r\nimport { ErrorHandler } from \"@errors/error-handler\";\r\nimport { InjectTypes } from \"@ioc/inject-types\";\r\n\r\n@injectable()\r\nexport class CommentController {\r\n\r\n    constructor(\r\n        @inject(InjectTypes.Service.COMMENT) private readonly _commentService: ICommentService\r\n    ) { }\r\n\r\n    list(req: Request, res: Response, next: NextFunction) {\r\n\r\n        let filters: CommentFilter = {};\r\n\r\n        this._commentService.list(filters, req.decoded.id).then((result) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'list', 'CommentController');\r\n        });\r\n    }\r\n\r\n    insert(req: Request, res: Response, next: NextFunction) {\r\n\r\n        let cmtDto: CommentCreateDto = Object.assign(new CommentCreateDto(), req.body);\r\n        cmtDto.userId = req.decoded.id;\r\n        this._commentService.add(cmtDto).then((createdId) => {\r\n            return this._commentService.find(createdId, req.decoded.id);\r\n        }).then((result) => {\r\n            return res.status(201).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'insert', 'CommentController');\r\n        });\r\n    }\r\n\r\n    find(req: Request, res: Response, next: NextFunction) {\r\n        const id: number = +req.params.id;\r\n        this._commentService.find(id, req.decoded.id).then((result) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'find', 'CommentController');\r\n        });\r\n    }\r\n\r\n    update(req: Request, res: Response, next: NextFunction) {\r\n        const id: number = req.params.id;\r\n        const cmtDto: CommentUpdateDto = Object.assign(new CommentCreateDto(), req.body);\r\n        this._commentService.update(id, cmtDto, req.decoded.id).then((result) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'update', 'CommentController');\r\n        });\r\n    }\r\n\r\n    delete(req: Request, res: Response, next: NextFunction) {\r\n        const id: number = +req.params.id;\r\n        this._commentService.delete(id, req.decoded.id).then(() => {\r\n            return res.status(200).json({\r\n                success: true\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'delete', 'CommentController');\r\n        });\r\n    }\r\n}\r\n","import { injectable, inject } from \"inversify\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { ErrorHandler } from \"@errors/error-handler\";\r\nimport { InjectTypes } from \"@ioc/inject-types\";\r\nimport { CompanyFilter } from \"@models/filters\";\r\nimport { ICompanyService } from \"@services/abstract\";\r\nimport { CompanyCreateDto, CompanyUpdateDto, CompanyUserRegisterDto, AddStatusTemplateDto } from \"@models/dtos\";\r\n\r\n@injectable()\r\nexport class CompanyController {\r\n\r\n  constructor(\r\n    @inject(InjectTypes.Service.COMPANY) private readonly _companyService: ICompanyService\r\n  ) { }\r\n\r\n  list(req: Request, res: Response, next: NextFunction) {\r\n\r\n    let filters: CompanyFilter = {};\r\n    if (req.query.hasOwnProperty(\"owner\")) {\r\n      if (req.query.assignedTo === \"true\") filters.owner = true;\r\n    }\r\n\r\n    this._companyService.list(filters, req.decoded.id).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'list', 'CompanyController');\r\n    });\r\n  }\r\n\r\n\r\n  insert(req: Request, res: Response, next: NextFunction) {\r\n    let cmpDto: CompanyCreateDto = Object.assign(new CompanyCreateDto(), req.body);\r\n    cmpDto.ownerId = req.decoded.id;\r\n    this._companyService.add(cmpDto).then((result) => {\r\n      return res.status(201).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'insert', 'CompanyController');\r\n    });\r\n  }\r\n\r\n  find(req: Request, res: Response, next: NextFunction) {\r\n    //aaaaaaaaaa\r\n    const id: number = +req.params.id;\r\n    this._companyService.find(id, req.decoded.id).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'find', 'CompanyController');\r\n    });\r\n  }\r\n\r\n  update(req: Request, res: Response, next: NextFunction) {\r\n    const id: number = req.params.id;\r\n    const cmpDto: CompanyUpdateDto = Object.assign(new CompanyCreateDto(), req.body);\r\n    this._companyService.update(id, cmpDto, req.decoded.id).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'update', 'CompanyController');\r\n    });\r\n  }\r\n\r\n  delete(req: Request, res: Response, next: NextFunction) {\r\n    const id: number = +req.params.id;\r\n    this._companyService.delete(id, req.decoded.id).then(() => {\r\n      return res.status(200).json({\r\n        success: true\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'delete', 'CompanyController');\r\n    });\r\n  }\r\n\r\n  requestMembership(req: Request, res: Response, next: NextFunction) {\r\n    const memRequestId: number = +req.params.id;\r\n    const curDto: CompanyUserRegisterDto = Object.assign(new CompanyUserRegisterDto(), req.body);\r\n    this._companyService.requestMembership(memRequestId, curDto, req.decoded.id).then(() => {\r\n      return res.status(200).json({\r\n        success: true\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'requestMembership', 'CompanyController');\r\n    });\r\n  }\r\n\r\n  acceptMembership(req: Request, res: Response, next: NextFunction) {\r\n    const id: number = +req.params.id;\r\n    this._companyService.acceptMembership(id, req.decoded.id).then(() => {\r\n      return res.status(200).json({\r\n        success: true\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'acceptMembership', 'CompanyController');\r\n    });\r\n  }\r\n\r\n  addStatusTemplate(req: Request, res: Response, next: NextFunction) {\r\n    const companyId: number = +req.params.id;\r\n    const stDto: AddStatusTemplateDto = Object.assign(new AddStatusTemplateDto(), req.body);\r\n    this._companyService.addStatusTemplate(companyId, stDto, req.decoded.id).then(() => {\r\n      return res.status(200).json({\r\n        success: true\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'addStatusTemplate', 'CompanyController');\r\n    });\r\n  }\r\n\r\n  showTree(req: Request, res: Response, next: NextFunction) {\r\n    const companyId: number = +req.params.id;\r\n    this._companyService.showTree(companyId).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'showTree', 'CompanyController');\r\n    });\r\n  }\r\n\r\n  statusTemplates(req: Request, res: Response, next: NextFunction) {\r\n    const companyId: number = +req.params.id;\r\n    this._companyService.getstatusTemplates(companyId).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'statusTemplates', 'CompanyController');\r\n    });\r\n  }\r\n\r\n  getMembers(req: Request, res: Response, next: NextFunction) {\r\n    const companyId: number = +req.params.id;\r\n    this._companyService.getMembers(companyId).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'getMembers', 'CompanyController');\r\n    });\r\n  }\r\n\r\n}\r\n","import { injectable, inject } from \"inversify\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { IssueCreateDto, IssueUpdateDto } from \"@models/dtos\";\r\nimport { IIssueService } from \"@services/abstract\";\r\nimport { IssueFilter } from \"@models/filters/issue-filter\";\r\nimport { ErrorHandler } from \"@errors/error-handler\";\r\nimport { InjectTypes } from \"@ioc/inject-types\";\r\n\r\n@injectable()\r\nexport class IssueController {\r\n\r\n    constructor(\r\n        @inject(InjectTypes.Service.ISSUE) private readonly _issueService: IIssueService\r\n    ) { }\r\n\r\n    list(req: Request, res: Response, next: NextFunction) {\r\n\r\n        let filters: IssueFilter = {};\r\n\r\n        this._issueService.list(filters, req.decoded.id).then((result) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'list', 'IssueController');\r\n        });\r\n    }\r\n\r\n    insert(req: Request, res: Response, next: NextFunction) {\r\n\r\n        let issDto: IssueCreateDto = Object.assign(new IssueCreateDto(), req.body);\r\n        issDto.creatorId = req.decoded.id;\r\n        this._issueService.add(issDto).then((createdId) => {\r\n            return this._issueService.find(createdId, req.decoded.id);\r\n        }).then((result) => {\r\n            return res.status(201).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'insert', 'IssueController');\r\n        });\r\n    }\r\n\r\n    find(req: Request, res: Response, next: NextFunction) {\r\n        const id: number = +req.params.id;\r\n        this._issueService.find(id, req.decoded.id).then((result) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'find', 'IssueController');\r\n        });\r\n    }\r\n\r\n    update(req: Request, res: Response, next: NextFunction) {\r\n        const id: number = req.params.id;\r\n        const issDto: IssueUpdateDto = Object.assign(new IssueCreateDto(), req.body);\r\n        this._issueService.update(id, issDto, req.decoded.id).then((result) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'update', 'IssueController');\r\n        });\r\n    }\r\n\r\n    delete(req: Request, res: Response, next: NextFunction) {\r\n        const id: number = +req.params.id;\r\n        this._issueService.delete(id, req.decoded.id).then(() => {\r\n            return res.status(200).json({\r\n                success: true\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'delete', 'IssueController');\r\n        });\r\n    }\r\n}\r\n","import { injectable, inject } from \"inversify\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { ProjectCreateDto, ProjectUpdateDto, ProjectUserRegisterDto } from \"@models/dtos\";\r\nimport { IProjectService } from \"@services/abstract\";\r\nimport { ProjectFilter } from \"@models/filters/project-filter\";\r\nimport { ErrorHandler } from \"@errors/error-handler\";\r\nimport { InjectTypes } from \"@ioc/inject-types\";\r\nimport { AppError } from \"@errors/app-error\";\r\n\r\n@injectable()\r\nexport class ProjectController {\r\n\r\n  constructor(\r\n    @inject(InjectTypes.Service.PROJECT) private readonly _projectService: IProjectService\r\n  ) { }\r\n\r\n  list(req: Request, res: Response, next: NextFunction) {\r\n\r\n    let filters: ProjectFilter = {};\r\n    if (req.query.hasOwnProperty(\"projectId\")) filters.parentId = +req.query.parentId;\r\n    if (req.query.hasOwnProperty(\"statusId\")) filters.statusId = +req.query.statusId;\r\n    if (req.query.hasOwnProperty(\"skip\")) filters.skip = +req.query.skip;\r\n    if (req.query.hasOwnProperty(\"take\")) filters.take = +req.query.take;\r\n\r\n    this._projectService.list(filters, req.decoded.id).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'list', 'TaskController');\r\n    });\r\n  }\r\n\r\n  listByCompany(req: Request, res: Response, next: NextFunction) {\r\n    const companyId: number = req.params.companyId;\r\n    let filters: ProjectFilter = {};\r\n    if (req.query.hasOwnProperty(\"skip\")) filters.skip = +req.query.skip;\r\n    if (req.query.hasOwnProperty(\"take\")) filters.take = +req.query.take;\r\n\r\n    this._projectService.listByCompany(filters, req.decoded.id, companyId).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'list', 'ProjectController');\r\n    });\r\n  }\r\n\r\n  insert(req: Request, res: Response, next: NextFunction) {\r\n\r\n    let prjDto: ProjectCreateDto = Object.assign(new ProjectCreateDto(), req.body);\r\n    prjDto.creatorId = req.decoded.id;\r\n    this._projectService.add(prjDto).then((createdId) => {\r\n      return this._projectService.find(createdId, req.decoded.id);\r\n    }).then((result) => {\r\n      return res.status(201).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'insert', 'ProjectController');\r\n    });\r\n  }\r\n\r\n  find(req: Request, res: Response, next: NextFunction) {\r\n    const id: number = +req.params.id;\r\n    this._projectService.find(id, req.decoded.id).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'find', 'ProjectController');\r\n    });\r\n  }\r\n\r\n  update(req: Request, res: Response, next: NextFunction) {\r\n    const id: number = req.params.id;\r\n    const prjDto: ProjectUpdateDto = Object.assign(new ProjectCreateDto(), req.body);\r\n    this._projectService.update(id, prjDto, req.decoded.id).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'update', 'ProjectController');\r\n    });\r\n  }\r\n\r\n  delete(req: Request, res: Response, next: NextFunction) {\r\n    const id: number = +req.params.id;\r\n    this._projectService.delete(id, req.decoded.id).then(() => {\r\n      return res.status(200).json({\r\n        success: true\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'delete', 'ProjectController');\r\n    });\r\n  }\r\n\r\n  assignProjectManager(req: Request, res: Response, next: NextFunction) {\r\n    return ErrorHandler.handleErrorResponses(new AppError('AppError', 'Method Not Implemented', 501), res, 'assignProjectManager', 'ProjectController');\r\n  }\r\n\r\n  start(req: Request, res: Response, next: NextFunction) {\r\n    return ErrorHandler.handleErrorResponses(new AppError('AppError', 'Method Not Implemented', 501), res, 'start', 'ProjectController');\r\n  }\r\n\r\n  pause(req: Request, res: Response, next: NextFunction) {\r\n    return ErrorHandler.handleErrorResponses(new AppError('AppError', 'Method Not Implemented', 501), res, 'stop', 'ProjectController');\r\n  }\r\n\r\n  getMembers(req: Request, res: Response, next: NextFunction) {\r\n    const id: number = +req.params.id;\r\n    this._projectService.getMembers(id, req.decoded.id).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'getMembers', 'ProjectController');\r\n    });\r\n  }\r\n\r\n  addMember(req: Request, res: Response, next: NextFunction) {\r\n    const id: number = +req.params.id;\r\n    let prjRgDto: ProjectUserRegisterDto = Object.assign(new ProjectUserRegisterDto(), req.body);\r\n    this._projectService.addMember(id, prjRgDto).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'addMember', 'ProjectController');\r\n    });\r\n  }\r\n}\r\n","import { injectable, inject } from \"inversify\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { QuestionCreateDto, QuestionUpdateDto } from \"@models/dtos\";\r\nimport { IQuestionService } from \"@services/abstract\";\r\nimport { QuestionFilter } from \"@models/filters/question-filter\";\r\nimport { ErrorHandler } from \"@errors/error-handler\";\r\nimport { InjectTypes } from \"@ioc/inject-types\";\r\n\r\n@injectable()\r\nexport class QuestionController {\r\n\r\n    constructor(\r\n        @inject(InjectTypes.Service.TASK) private readonly _questionService: IQuestionService\r\n    ) { }\r\n\r\n    list(req: Request, res: Response, next: NextFunction) {\r\n\r\n        let filters: QuestionFilter = {};\r\n\r\n        this._questionService.list(filters, req.decoded.id).then((result) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'list', 'QuestionController');\r\n        });\r\n    }\r\n\r\n    insert(req: Request, res: Response, next: NextFunction) {\r\n\r\n        let qstDto: QuestionCreateDto = Object.assign(new QuestionCreateDto(), req.body);\r\n        qstDto.creatorId = req.decoded.id;\r\n        this._questionService.add(qstDto).then((createdId) => {\r\n            return this._questionService.find(createdId, req.decoded.id);\r\n        }).then((result) => {\r\n            return res.status(201).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'insert', 'QuestionController');\r\n        });\r\n    }\r\n\r\n    find(req: Request, res: Response, next: NextFunction) {\r\n        const id: number = +req.params.id;\r\n        this._questionService.find(id, req.decoded.id).then((result) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'find', 'QuestionController');\r\n        });\r\n    }\r\n\r\n    update(req: Request, res: Response, next: NextFunction) {\r\n        const id: number = req.params.id;\r\n        const qstDto: QuestionUpdateDto = Object.assign(new QuestionCreateDto(), req.body);\r\n        this._questionService.update(id, qstDto, req.decoded.id).then((result) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                data: result\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'update', 'QuestionController');\r\n        });\r\n    }\r\n\r\n    delete(req: Request, res: Response, next: NextFunction) {\r\n        const id: number = +req.params.id;\r\n        this._questionService.delete(id, req.decoded.id).then(() => {\r\n            return res.status(200).json({\r\n                success: true\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'delete', 'QuestionController');\r\n        });\r\n    }\r\n}\r\n","import { injectable, inject } from \"inversify\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { TaskCreateDto, TaskUpdateDto, TaskStatusUpdateDto } from \"@models/dtos\";\r\nimport { ITaskService } from \"@services/abstract\";\r\nimport { TaskFilter } from \"@models/filters/task-filter\";\r\nimport { ErrorHandler } from \"@errors/error-handler\";\r\nimport { InjectTypes } from \"@ioc\";\r\nimport { AppError } from \"@errors/app-error\";\r\n\r\n@injectable()\r\nexport class TaskController {\r\n\r\n  constructor(\r\n    @inject(InjectTypes.Service.TASK) private readonly _taskService: ITaskService\r\n  ) { }\r\n\r\n  list(req: Request, res: Response, next: NextFunction) {\r\n\r\n    let filters: TaskFilter = {};\r\n    if (req.query.hasOwnProperty(\"assignedTo\")) filters.assignedTo = +req.query.assignedTo;\r\n    if (req.query.hasOwnProperty(\"createdBy\")) filters.createdBy = +req.query.createdBy;\r\n    if (req.query.hasOwnProperty(\"projectId\")) filters.projectId = +req.query.projectId;\r\n    if (req.query.hasOwnProperty(\"status\")) filters.status = +req.query.status;\r\n    if (req.query.hasOwnProperty(\"skip\")) filters.skip = +req.query.skip;\r\n    if (req.query.hasOwnProperty(\"take\")) filters.take = +req.query.take;\r\n\r\n    this._taskService.list(filters, req.decoded.id).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'list', 'TaskController');\r\n    });\r\n  }\r\n\r\n  insert(req: Request, res: Response, next: NextFunction) {\r\n\r\n    let tskDto: TaskCreateDto = Object.assign(new TaskCreateDto(), req.body);\r\n    tskDto.creatorId = req.decoded.id;\r\n    this._taskService.add(tskDto).then((createdId) => {\r\n      return this._taskService.find(createdId, req.decoded.id);\r\n    }).then((result) => {\r\n      return res.status(201).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'insert', 'TaskController');\r\n    });\r\n  }\r\n\r\n  find(req: Request, res: Response, next: NextFunction) {\r\n    const id: number = +req.params.id;\r\n    this._taskService.find(id, req.decoded.id).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'find', 'TaskController');\r\n    });\r\n  }\r\n\r\n  update(req: Request, res: Response, next: NextFunction) {\r\n    const id: number = req.params.id;\r\n    const tskDto: TaskUpdateDto = Object.assign(new TaskCreateDto(), req.body);\r\n    this._taskService.update(id, tskDto, req.decoded.id).then((result) => {\r\n      return res.status(200).json({\r\n        success: true,\r\n        data: result\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'update', 'TaskController');\r\n    });\r\n  }\r\n\r\n  delete(req: Request, res: Response, next: NextFunction) {\r\n    const id: number = +req.params.id;\r\n    this._taskService.delete(id, req.decoded.id).then(() => {\r\n      return res.status(200).json({\r\n        success: true\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'delete', 'TaskController');\r\n    });\r\n  }\r\n\r\n  //TODO guncellenen status projede var mı diye kontrol et\r\n  updateStatus(req: Request, res: Response, next: NextFunction) {\r\n    const id: number = +req.params.id;\r\n    let tStatusUpDto: TaskStatusUpdateDto = Object.assign(new TaskStatusUpdateDto(), req.body);\r\n    this._taskService.changeStatus(id, tStatusUpDto).then(() => {\r\n      return res.status(200).json({\r\n        success: true\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'updateStatus', 'TaskController');\r\n    });\r\n  }\r\n\r\n  convertToProject(req: Request, res: Response, next: NextFunction) {\r\n    const id: number = +req.params.id;\r\n    this._taskService.convertToProject(id, req.decoded.id).then(() => {\r\n      return res.status(200).json({\r\n        success: true\r\n      });\r\n    }).catch((error: Error) => {\r\n      return ErrorHandler.handleErrorResponses(error, res, 'convertToProject', 'TaskController');\r\n    });\r\n  }\r\n}\r\n","import { injectable, inject } from \"inversify\";\r\nimport { Request, Response, NextFunction } from \"express\";\r\nimport { RegisterDto, LoginDto } from \"@models/dtos\";\r\nimport { IUserService } from \"@services/abstract\";\r\nimport { ErrorHandler } from \"@errors/error-handler\";\r\nimport { InjectTypes } from \"@ioc/inject-types\";\r\n\r\n@injectable()\r\nexport class UserController {\r\n\r\n    constructor(\r\n        @inject(InjectTypes.Service.USER) private readonly _userService: IUserService\r\n    ) { }\r\n\r\n    public async register(req: Request, res: Response, next: NextFunction) {\r\n        let registerDto: RegisterDto = Object.assign(new RegisterDto(), req.body);\r\n        this._userService.register(registerDto).then((user) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                data: user\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'register', 'UserController');\r\n        })\r\n    }\r\n\r\n    public async login(req: Request, res: Response, next: NextFunction) {\r\n        let loginDto: LoginDto = Object.assign(new LoginDto(), req.body);\r\n        this._userService.login(loginDto).then((user) => {\r\n            return res.status(200).json({\r\n                success: true,\r\n                data: user\r\n            });\r\n        }).catch((error: Error) => {\r\n            return ErrorHandler.handleErrorResponses(error, res, 'login', 'UserController');\r\n        });\r\n    }\r\n}\r\n","import { RepositoryBase } from './base/repository.base';\r\nimport { IAbstractStatusRepository } from \"../abstract/i-abstract-status.repository\";\r\nimport { AbstractStatusEntity } from \"./../../entities/abstract-status.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\n@injectable()\r\nexport class AbstractStatusRepository extends RepositoryBase<AbstractStatusEntity> implements IAbstractStatusRepository {\r\n    constructor() {\r\n        super(\r\n            AbstractStatusEntity\r\n        );\r\n    }\r\n}\r\n","import { RepositoryBase } from './base/repository.base';\r\nimport { getManager } from \"typeorm\";\r\nimport { IAnswerRepository } from \"../abstract/i-answer.repository\";\r\nimport { AnswerEntity } from \"./../../entities/answer.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\n@injectable()\r\nexport class AnswerRepository extends RepositoryBase<AnswerEntity> implements IAnswerRepository {\r\n    constructor() {\r\n        super(\r\n            AnswerEntity\r\n        );\r\n    }\r\n}","import { IRepositoryBase } from './../../abstract/base/i-repository.base';\r\nimport { getManager, FindManyOptions, FindOneOptions, EntityManager } from 'typeorm';\r\nimport { unmanaged, injectable } from 'inversify';\r\n\r\nexport type ObjectType<T> = { new(): T } | Function;\r\n@injectable()\r\nexport class RepositoryBase<T> implements IRepositoryBase<T> {\r\n    private type: ObjectType<T>;\r\n    constructor(@unmanaged() type: ObjectType<T>) {\r\n        this.type = type;\r\n    }\r\n\r\n    list(options: FindManyOptions<T>): Promise<T[]> {\r\n        return getManager().getRepository(this.type).find(options);\r\n    }\r\n    findById(id: number): Promise<T> {\r\n        return getManager().getRepository(this.type).findOne(id);\r\n    }\r\n\r\n    findOne(id: number, options: FindOneOptions<T>): Promise<T> {\r\n        if (id !== null)\r\n            return getManager().getRepository(this.type).findOne(id, options);\r\n        else\r\n            return getManager().getRepository(this.type).findOne(options);\r\n    }\r\n\r\n    insert(model: T, manager: EntityManager = getManager()): Promise<T> {\r\n        return manager.getRepository(this.type).save(model);\r\n    }\r\n\r\n    update(id: number, model: T, manager: EntityManager = getManager()): Promise<any> {\r\n        return manager.getRepository(this.type).update(id, model);\r\n\r\n    }\r\n    delete(id: number, manager: EntityManager = getManager()): Promise<any> {\r\n        return manager.getRepository(this.type).delete(id);\r\n    }\r\n}\r\n","import { getManager } from \"typeorm\";\r\nimport { ICommentRepository } from \"../abstract/i-comment.repository\";\r\nimport { CommentEntity } from \"./../../entities/comment.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\nimport { RepositoryBase } from \"./base/repository.base\";\r\n@injectable()\r\nexport class CommentRepository extends RepositoryBase<CommentEntity> implements ICommentRepository {\r\n    constructor() {\r\n        super(\r\n            CommentEntity\r\n        );\r\n    }\r\n}","import { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\nimport { RepositoryBase } from \"./base/repository.base\";\r\nimport { CompanyMembershipEntity } from \"@entities/company-membership.entity\";\r\nimport { ICompanyMembershipRepository } from \"@repositories/abstract\";\r\n@injectable()\r\nexport class CompanyMembershipRepository extends RepositoryBase<CompanyMembershipEntity> implements ICompanyMembershipRepository {\r\n    constructor() {\r\n        super(\r\n            CompanyMembershipEntity\r\n        );\r\n    }\r\n}\r\n","import { RepositoryBase } from './base/repository.base';\r\nimport { getManager, getConnection } from \"typeorm\";\r\nimport { ICompanyRepository } from \"../abstract/i-company.repository\";\r\nimport { CompanyEntity } from \"./../../entities/company.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\nimport { CompanyFilter } from '@models/filters';\r\n@injectable()\r\nexport class CompanyRepository extends RepositoryBase<CompanyEntity> implements ICompanyRepository {\r\n  constructor() {\r\n    super(\r\n      CompanyEntity\r\n    );\r\n  }\r\n\r\n  listByFiltersAndUser(filters: CompanyFilter, userId: number): Promise<CompanyEntity[]> {\r\n    let query = getManager().createQueryBuilder(CompanyEntity, \"company\").select(\"company\")\r\n      .leftJoin(\"company.owner\", \"owner\").addSelect([\"owner.id\", \"owner.name\", \"owner.surname\", \"owner.username\"])\r\n      .where(\"owner.id =:userId\", { userId: userId })\r\n      .leftJoinAndSelect(\"company.members\", \"member\")\r\n      .leftJoin(\"member.user\", \"user\").addSelect([\"user.id\", \"user.name\", \"user.surname\", \"user.username\"])\r\n      .leftJoin(\"company.projects\", \"project\").addSelect([\"project.id\"]);\r\n    if (filters.owner === undefined) query = query.orWhere(\"user.id =:userId\", { userId: userId });\r\n\r\n    query = query.orderBy(\"company.id\", \"DESC\");\r\n    if (filters.take !== undefined) {\r\n      query = query.take(filters.take);\r\n      if (filters.skip !== undefined) query = query.skip(filters.skip);\r\n    }\r\n    return query.getMany();\r\n  }\r\n\r\n  findForDetails(id: number): Promise<CompanyEntity> {\r\n    let query = getManager().createQueryBuilder(CompanyEntity, \"company\").select(\"company\")\r\n      .where(\"company.id =:id\", { id: id })\r\n      .leftJoin(\"company.owner\", \"owner\").addSelect([\"owner.id\", \"owner.name\", \"owner.surname\", \"owner.username\"])\r\n      .leftJoinAndSelect(\"company.members\", \"member\")\r\n      .leftJoin(\"member.user\", \"user\").addSelect([\"user.id\", \"user.name\", \"user.surname\", \"user.username\"])\r\n      .leftJoin(\"company.projects\", \"project\").addSelect([\"project.id\"]);\r\n\r\n    return query.getOne();\r\n  }\r\n\r\n  insertMembershipRequest(companyId: number, userId: number): Promise<void> {\r\n    let query = getManager().createQueryBuilder().relation(CompanyEntity, \"requestedUsers\").of(companyId).add(userId);\r\n\r\n    return query;\r\n  }\r\n\r\n  insertMember(companyId: number, userId: number): Promise<void> {\r\n    let query = getManager().createQueryBuilder().relation(CompanyEntity, \"users\").of(companyId).add(userId);\r\n\r\n    return query;\r\n  }\r\n\r\n  //TODO sql injectiona dikkat\r\n  getTree(companyId: number) {\r\n    console.log(\"CMPID\", companyId);\r\n    // return getManager().query(\"getProjectTree @companyId='\" + companyId + \"'\");\r\n    return getManager().query(`CALL getProjectTree(${companyId})`);\r\n    // const escapeAlias = (alias: string) => getManager().connection.driver.escape(alias);\r\n    // const escapeColumn = (column: string) => getManager().connection.driver.escape(column);\r\n    // return getManager().query(\"\")\r\n    // return getManager().query(`SELECT * FROM project`);\r\n\r\n  }\r\n}\r\n","export { ProjectManagerRepository } from './project-manager.repository';\r\nexport { QuestionRepository } from './question.repository';\r\nexport { IssueRepository } from './issue.repository';\r\nexport { AnswerRepository } from './answer.repository';\r\nexport { StatusRepository } from './status.repository';\r\nexport { ProjectRepository } from './project.repository';\r\nexport { CompanyRepository } from './company.repository';\r\nexport { UserRepository } from './user.repository';\r\nexport { CommentRepository } from './comment.repository';\r\nexport { TaskAssignmentRepository } from './task-assignment.repository';\r\nexport { TaskRepository } from './task.repository';\r\nexport { CompanyMembershipRepository } from './company-membership.repository';\r\nexport { MembershipRequestRepository } from './membership-request.repository';\r\nexport { ProjectMembershipRepository } from './project-membership.repository';\r\nexport { LabelRepository } from './label.repository';\r\nexport { TaskLabelRepository } from './task-label.repository';\r\nexport { AbstractStatusRepository } from './abstract-status.repository';\r\nexport { StatusTemplateRepository } from './status-template.repository';\r\n","import { getManager } from \"typeorm\";\r\nimport { IIssueRepository } from \"../abstract/i-issue.repository\";\r\nimport { IssueEntity } from \"./../../entities/issue.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\nimport { RepositoryBase } from \"./base/repository.base\";\r\n@injectable()\r\nexport class IssueRepository extends RepositoryBase<IssueEntity> implements IIssueRepository {\r\n    constructor() {\r\n        super(\r\n            IssueEntity\r\n        );\r\n    }\r\n}","import { RepositoryBase } from './base/repository.base';\r\nimport { ILabelRepository } from \"../abstract/i-label.repository\";\r\nimport { LabelEntity } from \"./../../entities/label.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\n@injectable()\r\nexport class LabelRepository extends RepositoryBase<LabelEntity> implements ILabelRepository {\r\n    constructor() {\r\n        super(\r\n            LabelEntity\r\n        );\r\n    }\r\n}\r\n","import { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\nimport { RepositoryBase } from \"./base/repository.base\";\r\nimport { IMembershipRequestRepository } from \"@repositories/abstract\";\r\nimport { MembershipRequestEntity } from \"@entities/membership-request.entity\";\r\n@injectable()\r\nexport class MembershipRequestRepository extends RepositoryBase<MembershipRequestEntity> implements IMembershipRequestRepository {\r\n    constructor() {\r\n        super(\r\n            MembershipRequestEntity\r\n        );\r\n    }\r\n}\r\n","import { RepositoryBase } from './base/repository.base';\r\nimport { IProjectManagerRepository } from \"../abstract/i-project-manager.repository\";\r\nimport { ProjectManagerEntity } from \"./../../entities/project-manager.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\n@injectable()\r\nexport class ProjectManagerRepository extends RepositoryBase<ProjectManagerEntity> implements IProjectManagerRepository {\r\n    constructor() {\r\n        super(\r\n            ProjectManagerEntity\r\n        );\r\n    }\r\n}\r\n","import { RepositoryBase } from './base/repository.base';\r\nimport { IProjectMembershipRepository } from \"../abstract/i-project-membership.repository\";\r\nimport { ProjectMembershipEntity } from \"./../../entities/project-membership.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\n@injectable()\r\nexport class ProjectMembershipRepository extends RepositoryBase<ProjectMembershipEntity> implements IProjectMembershipRepository {\r\n    constructor() {\r\n        super(\r\n            ProjectMembershipEntity\r\n        );\r\n    }\r\n}\r\n","import { RepositoryBase } from './base/repository.base';\r\nimport { getManager } from \"typeorm\";\r\nimport { IProjectRepository } from \"../abstract/i-project.repository\";\r\nimport { ProjectEntity } from \"./../../entities/project.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\nimport { ProjectFilter } from '@models/filters';\r\n@injectable()\r\nexport class ProjectRepository extends RepositoryBase<ProjectEntity> implements IProjectRepository {\r\n  constructor() {\r\n    super(\r\n      ProjectEntity\r\n    );\r\n  }\r\n\r\n  listByFiltersByCompany(filters: ProjectFilter, companyId: number): Promise<ProjectEntity[]> {\r\n    let query = getManager().createQueryBuilder(ProjectEntity, \"project\")\r\n      .leftJoinAndSelect(\"project.managers\", \"manager\")\r\n      .where(\"project.companyId =:companyId\", { companyId: companyId })\r\n    query = query.orderBy(\"project.id\", \"DESC\");\r\n    if (filters.take !== undefined) {\r\n      query = query.take(filters.take);\r\n      if (filters.skip !== undefined) query = query.skip(filters.skip);\r\n    }\r\n    return query.orderBy(\"project.id\", \"DESC\").getMany();\r\n  }\r\n\r\n\r\n  listByFilters(filters: ProjectFilter): Promise<ProjectEntity[]> {\r\n    let query = getManager().createQueryBuilder(ProjectEntity, \"project\")\r\n      .leftJoinAndSelect(\"project.managers\", \"manager\")\r\n    if (filters.parentId !== undefined) query = query.andWhere(\"project.parentId =:projectId\", { projectId: filters.parentId });\r\n    if (filters.statusId !== undefined) query = query.andWhere(\"project.statusId =:statusId\", { statusId: filters.statusId });\r\n\r\n    query = query.orderBy(\"project.id\", \"DESC\");\r\n    if (filters.take !== undefined) {\r\n      query = query.take(filters.take);\r\n      if (filters.skip !== undefined) query = query.skip(filters.skip);\r\n    }\r\n    return query.orderBy(\"project.id\", \"DESC\").getMany();\r\n  }\r\n\r\n  findForDetails(id: number): Promise<ProjectEntity> {\r\n    let query = getManager().createQueryBuilder(ProjectEntity, \"project\").select([\"project.id\", \"project.title\", \"project.description\", \"project.parentId\", \"project.statusId\",\"project.prefix\"])\r\n      .where(\"project.id =:id\", { id: id })\r\n      .leftJoin(\"project.company\", \"company\").addSelect([\"company.id\", \"company.name\", \"company.description\"])\r\n      .leftJoin(\"company.owner\", \"companyOwner\").addSelect([\"companyOwner.id\", \"companyOwner.name\", \"companyOwner.surname\", \"companyOwner.username\"])\r\n      .leftJoin(\"project.creator\", \"creator\").addSelect([\"creator.id\", \"creator.name\", \"creator.surname\", \"creator.username\"])\r\n      .leftJoinAndSelect(\"project.statuses\", \"status\")\r\n    return query.getOne();\r\n  }\r\n\r\n  //   getRootProjects(companyId: number) {\r\n  //     let query = getManager().getTreeRepository(ProjectEntity).findDescendantsTree(\r\n  //\r\n  //   });\r\n  // }\r\n}\r\n\r\n\r\n//Companynin tüm root projectlerini getir yaprakları olmadan.\r\n//Alt seviyelerde bir project görüntülendiğinde en büyük atasının tüm yapraklarını görüntüle\r\n//\r\n","import { RepositoryBase } from './base/repository.base';\r\nimport { getManager } from \"typeorm\";\r\nimport { IQuestionRepository } from \"../abstract/i-question.repository\";\r\nimport { QuestionEntity } from \"./../../entities/question.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\n@injectable()\r\nexport class QuestionRepository extends RepositoryBase<QuestionEntity> implements IQuestionRepository {\r\n    constructor() {\r\n        super(\r\n            QuestionEntity\r\n        );\r\n    }\r\n}","import { RepositoryBase } from './base/repository.base';\r\nimport { IStatusTemplateRepository } from \"../abstract/i-status-template.repository\";\r\nimport { StatusTemplateEntity } from \"./../../entities/status-template.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\n@injectable()\r\nexport class StatusTemplateRepository extends RepositoryBase<StatusTemplateEntity> implements IStatusTemplateRepository {\r\n    constructor() {\r\n        super(\r\n            StatusTemplateEntity\r\n        );\r\n    }\r\n}\r\n","import { RepositoryBase } from './base/repository.base';\r\nimport { getManager } from \"typeorm\";\r\nimport { IStatusRepository } from \"../abstract/i-status.repository\";\r\nimport { StatusEntity } from \"./../../entities/status.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\n@injectable()\r\nexport class StatusRepository extends RepositoryBase<StatusEntity> implements IStatusRepository {\r\n    constructor() {\r\n        super(\r\n            StatusEntity\r\n        );\r\n    }\r\n}","import { RepositoryBase } from './base/repository.base';\r\nimport { ITaskAssignmentRepository } from \"../abstract/i-task-assignment.repository\";\r\nimport { TaskAssignmentEntity } from \"./../../entities/task-assignment.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\n@injectable()\r\nexport class TaskAssignmentRepository extends RepositoryBase<TaskAssignmentEntity> implements ITaskAssignmentRepository {\r\n    constructor() {\r\n        super(\r\n            TaskAssignmentEntity\r\n        );\r\n    }\r\n}\r\n","import { RepositoryBase } from './base/repository.base';\r\nimport { ITaskLabelRepository } from \"../abstract/i-task-label.repository\";\r\nimport { TaskLabelEntity } from \"./../../entities/task-label.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\n@injectable()\r\nexport class TaskLabelRepository extends RepositoryBase<TaskLabelEntity> implements ITaskLabelRepository {\r\n    constructor() {\r\n        super(\r\n            TaskLabelEntity\r\n        );\r\n    }\r\n}\r\n","import { RepositoryBase } from './base/repository.base';\r\nimport { ITaskRepository } from \"../abstract/i-task.repository\";\r\nimport { TaskEntity } from \"@entities/task.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport 'reflect-metadata';\r\nimport { getManager } from 'typeorm';\r\nimport { TaskFilter } from '@models/filters/task-filter';\r\n@injectable()\r\nexport class TaskRepository extends RepositoryBase<TaskEntity> implements ITaskRepository {\r\n  constructor() {\r\n    super(\r\n      TaskEntity\r\n    );\r\n  }\r\n\r\n  listByFilters(filters: TaskFilter): Promise<TaskEntity[]> {\r\n    let query = getManager().createQueryBuilder(TaskEntity, \"task\")\r\n      .leftJoinAndSelect(\"task.assignees\", \"assignee\");\r\n\r\n    if (filters.assignedTo !== undefined) query = query.andWhere(\"task.assignee.id =:id\", { id: filters.assignedTo });\r\n    if (filters.projectId !== undefined) query = query.andWhere(\"task.projectId =:projectId\", { projectId: filters.projectId });\r\n    if (filters.createdBy !== undefined) query = query.andWhere(\"task.creatorId =:creatorId\", { creatorId: filters.createdBy });\r\n    if (filters.status !== undefined) query = query.andWhere(\"task.statusId =:statusId\", { statusId: filters.status });\r\n\r\n    query = query.orderBy(\"task.id\", \"DESC\");\r\n    if (filters.take !== undefined) {\r\n      query = query.take(filters.take);\r\n      if (filters.skip !== undefined) query = query.skip(filters.skip);\r\n    }\r\n    query = query\r\n      .leftJoin(\"task.comments\", \"comment\").addSelect([\"comment.id\"])\r\n\r\n    return query.orderBy(\"task.id\", \"DESC\").getMany();\r\n  }\r\n\r\n  findForDetails(id: number): Promise<TaskEntity> {\r\n    let query = getManager().createQueryBuilder(TaskEntity, \"task\").select(\"task\")\r\n      .where(\"task.id =:id\", { id: id })\r\n      .innerJoin(\"task.creator\", \"creator\").addSelect([\"creator.id\", \"creator.name\", \"creator.surname\", \"creator.username\"])\r\n      .leftJoinAndSelect(\"task.assignees\", \"assignment\")\r\n      .leftJoin(\"assignment.user\", \"assignee\").addSelect([\"assignee.id\", \"assignee.name\", \"assignee.surname\", \"assignee.username\"])\r\n      .leftJoin(\"task.comments\", \"comment\").addSelect([\"comment.id\", \"comment.content\", \"comment.taskId\"])\r\n      .leftJoin(\"comment.creator\", \"commentCreator\").addSelect([\"commentCreator.id\", \"commentCreator.name\", \"commentCreator.surname\", \"commentCreator.username\"])\r\n      .leftJoin(\"task.fromIssue\", \"fromIssue\").addSelect([\"fromIssue.id\", \"fromIssue.title\", \"fromIssue.description\"])\r\n      .leftJoinAndSelect(\"task.project\", \"project\")\r\n      .leftJoin(\"task.status\", \"status\").addSelect([\"status.id\", \"status.title\", \"status.description\"])\r\n\r\n    return query.getOne();\r\n  }\r\n\r\n}\r\n","import { getManager } from \"typeorm\";\r\nimport { IUserRepository } from \"../abstract/i-user.repository\";\r\nimport { UserEntity } from \"./../../entities/user.entity\";\r\nimport { injectable } from \"inversify\";\r\nimport { RepositoryBase } from \"./base/repository.base\";\r\n@injectable()\r\nexport class UserRepository extends RepositoryBase<UserEntity> implements IUserRepository {\r\n    constructor() {\r\n        super(\r\n            UserEntity\r\n        );\r\n    }\r\n    findByLogin(email: string, password: string) {\r\n        return getManager().getRepository(UserEntity).findOne({ email: email, password: password })\r\n    }\r\n\r\n}\r\n","import { QueryRunner, getConnection } from \"typeorm\";\r\n\r\nexport class Uow {\r\n    qr: QueryRunner;\r\n\r\n    constructor() {\r\n        this.qr = getConnection().createQueryRunner();\r\n    }\r\n\r\n    async start() {\r\n        await this.qr.connect();\r\n        await this.qr.startTransaction();\r\n    }\r\n\r\n    getManager() {\r\n        return this.qr.manager;\r\n    }\r\n\r\n    async commit() {\r\n        await this.qr.commitTransaction();\r\n    }\r\n\r\n    async rollback() {\r\n        await this.qr.rollbackTransaction();\r\n    }\r\n\r\n    async release() {\r\n        await this.qr.release();\r\n    }\r\n}\r\n","import * as express from 'express';\r\nimport 'reflect-metadata';\r\nimport { AnswerUpdateDto, AnswerCreateDto } from '@models/dtos';\r\nimport { validationMiddleware } from '@middlewares';\r\nimport { authorize } from '@middlewares';\r\nimport { IOC } from '@ioc';\r\nimport { AnswerController } from '@controllers/answer.controller';\r\n\r\nexport class AnswerRoutes {\r\n    public static configureRoutes(app: express.Application): void {\r\n        const root = \"/api/answers\";\r\n        const ctrl = IOC.container.get(AnswerController);\r\n\r\n        app.route(root + '/')\r\n            .get(authorize, (req, res, next) => ctrl.list(req, res, next));\r\n\r\n        app.route(root + '/:id')\r\n            .get(authorize, (req, res, next) => ctrl.find(req, res, next));\r\n\r\n        app.route(root + '/')\r\n            .post(validationMiddleware(AnswerCreateDto), authorize, (req, res, next) => ctrl.insert(req, res, next));\r\n\r\n        app.route(root + '/:id')\r\n            .put(validationMiddleware(AnswerUpdateDto), authorize, (req, res, next) => ctrl.update(req, res, next));\r\n\r\n        app.route(root + '/:id')\r\n            .delete(authorize, (req, res, next) => ctrl.delete(req, res, next));\r\n\r\n    }\r\n}\r\n","import * as express from 'express';\r\nimport 'reflect-metadata';\r\nimport { CommentUpdateDto, CommentCreateDto } from '@models/dtos';\r\nimport { validationMiddleware } from '@middlewares';\r\nimport { authorize } from '@middlewares';\r\nimport { IOC } from '@ioc';\r\nimport { CommentController } from '@controllers/comment.controller';\r\n\r\nexport class CommentRoutes {\r\n    public static configureRoutes(app: express.Application): void {\r\n        const root = \"/api/comments\";\r\n        const ctrl = IOC.container.get(CommentController);\r\n\r\n        app.route(root + '/')\r\n            .get(authorize, (req, res, next) => ctrl.list(req, res, next));\r\n\r\n        app.route(root + '/:id')\r\n            .get(authorize, (req, res, next) => ctrl.find(req, res, next));\r\n\r\n        app.route(root + '/')\r\n            .post(validationMiddleware(CommentCreateDto), authorize, (req, res, next) => ctrl.insert(req, res, next));\r\n\r\n        app.route(root + '/:id')\r\n            .put(validationMiddleware(CommentUpdateDto), authorize, (req, res, next) => ctrl.update(req, res, next));\r\n\r\n        app.route(root + '/:id')\r\n            .delete(authorize, (req, res, next) => ctrl.delete(req, res, next));\r\n\r\n    }\r\n}\r\n","import * as express from 'express';\r\nimport 'reflect-metadata';\r\nimport { validationMiddleware } from '@middlewares';\r\nimport { authorize } from '@middlewares';\r\nimport { IOC } from '@ioc';\r\nimport { CompanyController } from '@controllers/company.controller';\r\nimport { CompanyCreateDto, CompanyUpdateDto, CompanyUserRegisterDto, AddStatusTemplateDto } from '@models/dtos';\r\n\r\nexport class CompanyRoutes {\r\n  public static configureRoutes(app: express.Application): void {\r\n    const root = \"/api/companies\";\r\n    const ctrl = IOC.container.get(CompanyController);\r\n\r\n    app.route(root + '/')\r\n      .get(authorize, (req, res, next) => ctrl.list(req, res, next));\r\n\r\n    app.route(root + '/:id')\r\n      .get(authorize, (req, res, next) => ctrl.find(req, res, next));\r\n\r\n    app.route(root + '/')\r\n      .post(validationMiddleware(CompanyCreateDto), authorize, (req, res, next) => ctrl.insert(req, res, next));\r\n\r\n    app.route(root + '/:id')\r\n      .put(validationMiddleware(CompanyUpdateDto), authorize, (req, res, next) => ctrl.update(req, res, next));\r\n\r\n    app.route(root + '/:id')\r\n      .delete(authorize, (req, res, next) => ctrl.delete(req, res, next));\r\n\r\n    //TODO asagidaki 2 fonksiyon duzenlenecek baska controllere eklenecek\r\n    app.route(root + '/:id/requestMembership')\r\n      .post(validationMiddleware(CompanyUserRegisterDto), authorize, (req, res, next) => ctrl.requestMembership(req, res, next));\r\n\r\n    app.route(root + '/:id/acceptMembership')\r\n      .put(authorize, (req, res, next) => ctrl.acceptMembership(req, res, next));\r\n\r\n    //TODO declineMembership metodu ekle\r\n\r\n    app.route(root + '/:id/addStatusTemplate')\r\n      .post(validationMiddleware(AddStatusTemplateDto), authorize, (req, res, next) => ctrl.addStatusTemplate(req, res, next));\r\n\r\n    app.route(root + '/:id/showTree')\r\n      .get(authorize, (req, res, next) => ctrl.showTree(req, res, next));\r\n\r\n    app.route(root + '/:id/statusTemplates')\r\n      .get(authorize, (req, res, next) => ctrl.statusTemplates(req, res, next));\r\n\r\n    app.route(root + '/:id/getMembers')\r\n      .get(authorize, (req, res, next) => ctrl.getMembers(req, res, next));\r\n  }\r\n}\r\n","import { UserRoutes } from './user.routes';\r\nimport { CompanyRoutes } from './company.routes';\r\nimport * as express from 'express';\r\nimport { TaskRoutes } from './task.routes';\r\nimport { CommentRoutes } from './comment.routes';\r\nimport { QuestionRoutes } from './question.routes';\r\nimport { AnswerRoutes } from './answer.routes';\r\nimport { IssueRoutes } from './issue.routes';\r\nimport { ProjectRoutes } from './project.routes';\r\n\r\nexport class RouteBinder {\r\n  public static configureRoutes(app: express.Application): void {\r\n    TaskRoutes.configureRoutes(app);\r\n    CommentRoutes.configureRoutes(app);\r\n    UserRoutes.configureRoutes(app);\r\n    CompanyRoutes.configureRoutes(app);\r\n    ProjectRoutes.configureRoutes(app);\r\n    QuestionRoutes.configureRoutes(app);\r\n    AnswerRoutes.configureRoutes(app);\r\n    IssueRoutes.configureRoutes(app);\r\n  }\r\n}\r\n","import * as express from 'express';\r\nimport 'reflect-metadata';\r\nimport { IssueUpdateDto, IssueCreateDto } from '@models/dtos';\r\nimport { validationMiddleware } from '@middlewares';\r\nimport { authorize } from '@middlewares';\r\nimport { IOC } from '@ioc';\r\nimport { IssueController } from '@controllers/issue.controller';\r\n\r\nexport class IssueRoutes {\r\n    public static configureRoutes(app: express.Application): void {\r\n        const root = \"/api/issues\";\r\n        const ctrl = IOC.container.get(IssueController);\r\n\r\n        app.route(root + '/')\r\n            .get(authorize, (req, res, next) => ctrl.list(req, res, next));\r\n\r\n        app.route(root + '/:id')\r\n            .get(authorize, (req, res, next) => ctrl.find(req, res, next));\r\n\r\n        app.route(root + '/')\r\n            .post(validationMiddleware(IssueCreateDto), authorize, (req, res, next) => ctrl.insert(req, res, next));\r\n\r\n        app.route(root + '/:id')\r\n            .put(validationMiddleware(IssueUpdateDto), authorize, (req, res, next) => ctrl.update(req, res, next));\r\n\r\n        app.route(root + '/:id')\r\n            .delete(authorize, (req, res, next) => ctrl.delete(req, res, next));\r\n\r\n    }\r\n}\r\n","import * as express from 'express';\r\nimport 'reflect-metadata';\r\nimport { ProjectUpdateDto, ProjectCreateDto, ProjectAssignManagerDto } from '@models/dtos';\r\nimport { validationMiddleware } from '@middlewares';\r\nimport { authorize } from '@middlewares';\r\nimport { IOC } from '@ioc';\r\nimport { ProjectController } from '@controllers/project.controller';\r\n\r\nexport class ProjectRoutes {\r\n  public static configureRoutes(app: express.Application): void {\r\n    const root = \"/api/projects\"; //TODO rootProjects yap\r\n    const ctrl = IOC.container.get(ProjectController);\r\n\r\n    //verilen companyId'ye gore projeleri getirir\r\n    app.route(root + '/company/:companyId')\r\n      .get(authorize, (req, res, next) => ctrl.listByCompany(req, res, next));\r\n\r\n    app.route(root + '/:id')\r\n      .get(authorize, (req, res, next) => ctrl.find(req, res, next));\r\n\r\n    app.route(root + '/')\r\n      .get(authorize, (req, res, next) => ctrl.list(req, res, next));\r\n\r\n    app.route(root + '/')\r\n      .post(validationMiddleware(ProjectCreateDto), authorize, (req, res, next) => ctrl.insert(req, res, next));\r\n\r\n    app.route(root + '/:id')\r\n      .put(validationMiddleware(ProjectUpdateDto), authorize, (req, res, next) => ctrl.update(req, res, next));\r\n\r\n    app.route(root + '/:id')\r\n      .delete(authorize, (req, res, next) => ctrl.delete(req, res, next));\r\n\r\n    app.route(root + '/:id/assignProjectManager')\r\n      .put(validationMiddleware(ProjectAssignManagerDto), authorize, (req, res, next) => ctrl.assignProjectManager(req, res, next));\r\n\r\n    app.route(root + '/:id/addMember')\r\n      .post(validationMiddleware(ProjectAssignManagerDto), authorize, (req, res, next) => ctrl.addMember(req, res, next));\r\n\r\n    app.route(root + '/:id/members')\r\n      .get(authorize, (req, res, next) => ctrl.getMembers(req, res, next));\r\n\r\n    app.route(root + '/:id/start')\r\n      .get(authorize, (req, res, next) => ctrl.start(req, res, next));\r\n\r\n    app.route(root + '/:id/pause')\r\n      .get(authorize, (req, res, next) => ctrl.pause(req, res, next));\r\n\r\n\r\n\r\n  }\r\n}\r\n","import * as express from 'express';\r\nimport 'reflect-metadata';\r\nimport { QuestionUpdateDto, QuestionCreateDto } from '@models/dtos';\r\nimport { validationMiddleware } from '@middlewares';\r\nimport { authorize } from '@middlewares';\r\nimport { IOC } from '@ioc';\r\nimport { QuestionController } from '@controllers/question.controller';\r\n\r\nexport class QuestionRoutes {\r\n    public static configureRoutes(app: express.Application): void {\r\n        const root = \"/api/questions\";\r\n        const ctrl = IOC.container.get(QuestionController);\r\n\r\n        app.route(root + '/')\r\n            .get(authorize, (req, res, next) => ctrl.list(req, res, next));\r\n\r\n        app.route(root + '/:id')\r\n            .get(authorize, (req, res, next) => ctrl.find(req, res, next));\r\n\r\n        app.route(root + '/')\r\n            .post(validationMiddleware(QuestionCreateDto), authorize, (req, res, next) => ctrl.insert(req, res, next));\r\n\r\n        app.route(root + '/:id')\r\n            .put(validationMiddleware(QuestionUpdateDto), authorize, (req, res, next) => ctrl.update(req, res, next));\r\n\r\n        app.route(root + '/:id')\r\n            .delete(authorize, (req, res, next) => ctrl.delete(req, res, next));\r\n\r\n    }\r\n}\r\n","import * as express from 'express';\r\nimport 'reflect-metadata';\r\nimport { TaskUpdateDto, TaskCreateDto, TaskStatusUpdateDto } from '@models/dtos';\r\nimport { validationMiddleware } from '@middlewares';\r\nimport { authorize } from '@middlewares';\r\nimport { IOC } from '@ioc';\r\nimport { TaskController } from '@controllers/task.controller';\r\n\r\nexport class TaskRoutes {\r\n  public static configureRoutes(app: express.Application): void {\r\n    const root = \"/api/tasks\";\r\n    const ctrl = IOC.container.get(TaskController);\r\n\r\n    app.route(root + '/')\r\n      .get(authorize, (req, res, next) => ctrl.list(req, res, next));\r\n\r\n    app.route(root + '/:id')\r\n      .get(authorize, (req, res, next) => ctrl.find(req, res, next));\r\n\r\n    app.route(root + '/')\r\n      .post(validationMiddleware(TaskCreateDto), authorize, (req, res, next) => ctrl.insert(req, res, next));\r\n\r\n    app.route(root + '/:id')\r\n      .put(validationMiddleware(TaskUpdateDto), authorize, (req, res, next) => ctrl.update(req, res, next));\r\n\r\n    app.route(root + '/:id')\r\n      .delete(authorize, (req, res, next) => ctrl.delete(req, res, next));\r\n\r\n    app.route(root + '/:id/updateStatus')\r\n      .put(validationMiddleware(TaskStatusUpdateDto), authorize, (req, res, next) => ctrl.updateStatus(req, res, next));\r\n\r\n    app.route(root + '/:id/convertToProject')\r\n      .put(authorize, (req, res, next) => ctrl.convertToProject(req, res, next));\r\n\r\n  }\r\n}\r\n","import * as express from 'express';\r\nimport { IOC } from '../ioc';\r\nimport { validationMiddleware } from '@middlewares';\r\nimport { LoginDto } from '@models/dtos';\r\nimport { UserController } from '@controllers/user.controller';\r\n\r\nexport class UserRoutes {\r\n    public static configureRoutes(app: express.Application): void {\r\n        const root = \"/api/users\";\r\n        const ctrl = IOC.container.get(UserController);\r\n\r\n        app.route(root + '/register')\r\n            .post((req, res, next) => ctrl.register(req, res, next));\r\n\r\n        app.route(root + '/login')\r\n            .post(validationMiddleware(LoginDto), (req, res, next) => ctrl.login(req, res, next));\r\n    }\r\n}\r\n","import { IAnswerService } from \"@services/abstract\";\r\nimport { injectable, inject } from \"inversify\";\r\nimport { InjectTypes } from \"@ioc\";\r\nimport { IAnswerRepository } from \"@repositories/abstract\";\r\nimport { AnswerCreateDto, AnswerListDto, AnswerDetailDto, AnswerUpdateDto } from \"@models/dtos\";\r\nimport { AnswerEntity } from \"@entities/answer.entity\";\r\nimport { AnswerFilter } from \"@models/filters\";\r\nimport { AppError } from \"@errors/app-error\";\r\n\r\n@injectable()\r\nexport class AnswerService implements IAnswerService {\r\n\r\n    constructor(\r\n        @inject(InjectTypes.Repository.ANSWER) private readonly _answerRepository: IAnswerRepository\r\n    ) { }\r\n\r\n    add(model: AnswerCreateDto): Promise<number> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            //TODO yetkisi var mı diye kontrol et\r\n            let answerEn: AnswerEntity = Object.assign(new AnswerEntity(), model);\r\n            this._answerRepository.insert(answerEn).then((res) => {\r\n                resolve(res.id);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    list(filters: AnswerFilter, requestorId: number): Promise<AnswerListDto[]> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    find(id: number, requestorId: number): Promise<AnswerDetailDto> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    update(id: number, model: AnswerUpdateDto, requestorId: number) {\r\n        return new Promise<any>((resolve, reject) => {\r\n            let oldAnswer: AnswerEntity;\r\n            let updatedAnswer: AnswerEntity;\r\n            this._answerRepository.findById(id).then((foundAnswer) => {\r\n                oldAnswer = foundAnswer;\r\n                if (!foundAnswer) throw new AppError('AppError', 'Answer not found.', 404);\r\n                //TODO yetkisi var mı diye kontrol et\r\n                updatedAnswer = Object.assign(oldAnswer, model);\r\n                return this._answerRepository.update(id, updatedAnswer);\r\n            }).then(() => {\r\n                resolve(updatedAnswer);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    delete(id: number, requestorId: number) {\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._answerRepository.findById(id).then((foundAnswer) => {\r\n                if (!foundAnswer) throw new AppError('AppError', 'Answer not found.', 404);\r\n                //TODO yetkisi var mı diye kontrol et\r\n                return this._answerRepository.delete(id);\r\n            }).then(() => {\r\n                resolve();\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    //TODO Auth fonksiyonu yaz\r\n\r\n}\r\n","import { ICommentService } from \"@services/abstract\";\r\nimport { injectable, inject } from \"inversify\";\r\nimport { InjectTypes } from \"@ioc\";\r\nimport { ICommentRepository } from \"@repositories/abstract\";\r\nimport { CommentCreateDto, CommentListDto, CommentDetailDto, CommentUpdateDto } from \"@models/dtos\";\r\nimport { CommentEntity } from \"@entities/comment.entity\";\r\nimport { CommentFilter } from \"@models/filters\";\r\nimport { AppError } from \"@errors/app-error\";\r\n\r\n@injectable()\r\nexport class CommentService implements ICommentService {\r\n\r\n    constructor(\r\n        @inject(InjectTypes.Repository.COMMENT) private readonly _commentRepository: ICommentRepository\r\n    ) { }\r\n\r\n    add(model: CommentCreateDto): Promise<number> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            //TODO yetkisi var mı diye kontrol et\r\n            let commentEn: CommentEntity = Object.assign(new CommentEntity(), model);\r\n            this._commentRepository.insert(commentEn).then((res) => {\r\n                resolve(res.id);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    list(filters: CommentFilter, requestorId: number): Promise<CommentListDto[]> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    find(id: number, requestorId: number): Promise<CommentDetailDto> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    update(id: number, model: CommentUpdateDto, requestorId: number) {\r\n        return new Promise<any>((resolve, reject) => {\r\n            let oldComment: CommentEntity;\r\n            let updatedComment: CommentEntity;\r\n            this._commentRepository.findById(id).then((foundComment) => {\r\n                oldComment = foundComment;\r\n                if (!foundComment) throw new AppError('AppError', 'Comment not found.', 404);\r\n                //TODO yetkisi var mı diye kontrol et\r\n                updatedComment = Object.assign(oldComment, model);\r\n                return this._commentRepository.update(id, updatedComment);\r\n            }).then(() => {\r\n                resolve(updatedComment);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    delete(id: number, requestorId: number) {\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._commentRepository.findById(id).then((foundComment) => {\r\n                if (!foundComment) throw new AppError('AppError', 'Comment not found.', 404);\r\n                //TODO yetkisi var mı diye kontrol et\r\n                return this._commentRepository.delete(id);\r\n            }).then(() => {\r\n                resolve();\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    //TODO Auth fonksiyonu yaz\r\n\r\n}\r\n","import { ICompanyService } from \"@services/abstract\";\r\nimport { injectable, inject } from \"inversify\";\r\nimport { InjectTypes } from \"@ioc\";\r\nimport {\r\n\tICompanyRepository,\r\n\tICompanyMembershipRepository,\r\n\tIMembershipRequestRepository,\r\n\tIStatusTemplateRepository,\r\n\tIAbstractStatusRepository\r\n} from \"@repositories/abstract\";\r\nimport {\r\n\tCompanyCreateDto,\r\n\tCompanyListDto,\r\n\tCompanyDetailDto,\r\n\tCompanyUpdateDto,\r\n\tCompanyUserRegisterDto,\r\n\tAddStatusTemplateDto,\r\n\tUserSummaryDto\r\n} from \"@models/dtos\";\r\nimport { CompanyEntity } from \"@entities/company.entity\";\r\nimport { CompanyFilter } from \"@models/filters\";\r\nimport { AppError } from \"@errors/app-error\";\r\nimport { CompanyMembershipEntity } from \"@entities/company-membership.entity\";\r\nimport { MembershipRequestEntity } from \"@entities/membership-request.entity\";\r\nimport { Uow } from \"@repositories/uow\";\r\nimport { StatusTemplateEntity } from \"@entities/status-template.entity\";\r\nimport { AbstractStatusEntity } from \"@entities/abstract-status.entity\";\r\nimport { ProjectTreeItem, StatusTreeItem, TaskTreeItem } from \"@models/project-tree\";\r\nimport * as _ from 'lodash';\r\n\r\n@injectable()\r\nexport class CompanyService implements ICompanyService {\r\n\r\n\tconstructor(\r\n\t\t@inject(InjectTypes.Repository.COMPANY)\r\n\t\tprivate readonly _companyRepository: ICompanyRepository,\r\n\t\t@inject(InjectTypes.Repository.COMPANY_MEMBERSHIP)\r\n\t\tprivate readonly _companyMembershipRepository: ICompanyMembershipRepository,\r\n\t\t@inject(InjectTypes.Repository.MEMBERSHIP_REQUEST)\r\n\t\tprivate readonly _membershipRequestRepository: IMembershipRequestRepository,\r\n\t\t@inject(InjectTypes.Repository.STATUS_TEMPLATE)\r\n\t\tprivate readonly _statusTemplateRepository: IStatusTemplateRepository,\r\n\t\t@inject(InjectTypes.Repository.ABSTRACT_STATUS)\r\n\t\tprivate readonly _abstractStatusRepository: IAbstractStatusRepository,\r\n\t) { }\r\n\r\n\t//Herkes topluluk oluşturabilir. Daha sonra sayı sınırı ekle.\r\n\tasync add(model: CompanyCreateDto): Promise<number> {\r\n\t\tlet companyEn: CompanyEntity = Object.assign(new CompanyEntity(), model);\r\n\t\tcompanyEn.createdAt = new Date();\r\n\t\tcompanyEn.lastUpdated = new Date();\r\n\t\tlet inserted: CompanyEntity = await this._companyRepository.insert(companyEn);\r\n\t\treturn Promise.resolve(inserted.id);\r\n\t}\r\n\r\n\t//Yalnızca kullanıcının üyesi veya kurucusu olduğu topluluklar gelecek\r\n\tasync list(filters: CompanyFilter, requestorId: number) {\r\n\t\tlet companyDtos: CompanyListDto[] = [];\r\n\t\tlet companyEns: CompanyEntity[] = await this._companyRepository.listByFiltersAndUser(filters, requestorId);\r\n\t\tcompanyEns.map((cmp) => {\r\n\t\t\tlet companyDto: CompanyListDto = Object.assign(new CompanyListDto(), cmp, { rootProjects: undefined, users: undefined })\r\n\t\t\tcompanyDto.projectCount = cmp.projects.length;\r\n\t\t\tcompanyDto.userCount = cmp.members.length;\r\n\t\t\tcompanyDtos.push(companyDto);\r\n\t\t});\r\n\t\treturn Promise.resolve(companyDtos);\r\n\t}\r\n\r\n\t//Yalnızca kullanıcının üyesi olduğu topluluklar gelecek aksi halde unauthorized, diger kullanıcılar için daha az veri getiren başka metot olacak\r\n\tasync find(id: number, requestorId: number): Promise<CompanyDetailDto> {\r\n\t\tlet companyEn: CompanyEntity = await this._companyRepository.findForDetails(id);\r\n\t\tif (!companyEn) throw new AppError('AppError', 'Company not found.', 404);\r\n\t\tlet companyDto: CompanyDetailDto = Object.assign(new CompanyDetailDto(), companyEn, { projects: undefined, users: undefined });\r\n\t\tcompanyDto.projectCount = companyEn.projects.length;\r\n\t\tcompanyDto.userCount = companyEn.members.length;\r\n\t\treturn Promise.resolve(companyDto);\r\n\t}\r\n\r\n\t//Yalnızca kurucu işlem yapabilir\r\n\tasync update(id: number, model: CompanyUpdateDto, requestorId: number) {\r\n\t\tlet updatedCompany: CompanyEntity;\r\n\t\tlet oldCompany: CompanyEntity = await this._companyRepository.findById(id);\r\n\t\tif (!oldCompany) throw new AppError('AppError', 'Company not found.', 404);\r\n\t\tif (oldCompany.ownerId !== requestorId)\r\n\t\t\tthrow new AppError('AppError', 'Your are not the owner of this company.', 403);\r\n\t\tupdatedCompany = Object.assign(oldCompany, model);\r\n\t\tawait this._companyRepository.update(id, updatedCompany);\r\n\t\treturn Promise.resolve(updatedCompany);\r\n\t}\r\n\r\n\t//Yalnızca kurucu işlem yapabilir\r\n\tasync delete(id: number, requestorId: number) {\r\n\t\tlet companyEn: CompanyEntity = await this._companyRepository.findById(id);\r\n\t\tif (!companyEn) throw new AppError('AppError', 'Company not found.', 404);\r\n\t\tif (companyEn.ownerId !== requestorId)\r\n\t\t\tthrow new AppError('AppError', 'Your are not the owner of this company.', 403);\r\n\t\tawait this._companyRepository.delete(id);\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\t//Yalnızca isteği alan kişi işlem yapabilir.\r\n\tasync acceptMembership(msrId: number, requestorId: number): Promise<void> {\r\n\t\tlet msReEn: MembershipRequestEntity = await this._membershipRequestRepository.findOne(msrId, { relations: [\"user\", \"company\", \"company.members\"] });\r\n\t\tif (!msReEn)\r\n\t\t\tthrow new AppError('AppError', 'Membership request not found.', 404);\r\n\t\tif (msReEn.userId !== requestorId)\r\n\t\t\tthrow new AppError('AppError', 'You cant accept requests which are not for you', 403);\r\n\t\tif (msReEn.company.members.filter(x => x.userId === msReEn.userId).length > 0 || msReEn.company.ownerId === msReEn.userId)\r\n\t\t\tthrow new AppError('AppError', 'You are Already a Member of this company.', 409);\r\n\t\tlet cMemEn: CompanyMembershipEntity = new CompanyMembershipEntity();\r\n\t\tcMemEn.userId = msReEn.userId;\r\n\t\tcMemEn.companyId = msReEn.companyId;\r\n\t\tcMemEn.joiningDate = new Date();\r\n\t\tcMemEn.status = 1; //TODO enum yapılacak kullanıcı topluluğun aktif üyesiyse 1 topluluktan atılırsa başka değer\r\n\r\n\t\tlet uow = new Uow();\r\n\t\tawait uow.start();\r\n\t\ttry {\r\n\t\t\tcMemEn = await this._companyMembershipRepository.insert(cMemEn, uow.getManager());\r\n\t\t\tawait this._membershipRequestRepository.delete(msrId, uow.getManager());\r\n\t\t\tawait uow.commit();\r\n\t\t} catch (err) { await uow.rollback(); throw err; } finally { await uow.release(); }\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\t//Yalnızca kurucu istek gönderebilir.\r\n\tasync requestMembership(id: number, model: CompanyUserRegisterDto, requestorId: number): Promise<void> {\r\n\t\tlet companyEn: CompanyEntity = await this._companyRepository.findOne(id, { relations: [\"requestsSent\", \"members\", \"members.user\", \"owner\"] });\r\n\t\tif (!companyEn)\r\n\t\t\tthrow new AppError('AppError', 'Company not found.', 404);\r\n\t\tif (companyEn.ownerId !== requestorId)\r\n\t\t\tthrow new AppError('AppError', 'You must be the owner of this company for this operation', 403);\r\n\t\tif (companyEn.members.filter(x => x.userId === model.userId).length > 0 || companyEn.owner.id === model.userId)\r\n\t\t\tthrow new AppError('AppError', 'User Is Already a Member of this company.', 409);\r\n\t\tlet duplicated = await this._membershipRequestRepository.findOne(null, { where: { userId: model.userId, companyId: id } });\r\n\t\tif (duplicated)\r\n\t\t\tthrow new AppError('AppError', 'Your Company already sent a membership request to this user.', 409);\r\n\r\n\t\tlet msReEn: MembershipRequestEntity = new MembershipRequestEntity();\r\n\t\tmsReEn.userId = model.userId;\r\n\t\tmsReEn.companyId = id;\r\n\t\tmsReEn.createdAt = new Date();\r\n\t\tawait this._membershipRequestRepository.insert(msReEn);\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\tasync addStatusTemplate(id: number, model: AddStatusTemplateDto, requestorId: number): Promise<any> {\r\n\t\tlet uow = new Uow();\r\n\t\tawait uow.start();\r\n\t\ttry {\r\n\t\t\tlet modST = new StatusTemplateEntity();\r\n\t\t\tmodST.companyId = id;\r\n\t\t\tmodST.createdAt = new Date();\r\n\t\t\tmodST.lastUpdated = new Date();\r\n\t\t\tmodST.creatorId = requestorId;\r\n\t\t\tmodST.name = model.name;\r\n\t\t\tmodST = await this._statusTemplateRepository.insert(modST);\r\n\r\n\t\t\tfor (let i = 0; i < model.statuses.length; i++) {\r\n\t\t\t\tlet abs = new AbstractStatusEntity();\r\n\t\t\t\tabs.baseStatus = model.statuses[i].baseStatus;\r\n\t\t\t\tabs.title = model.statuses[i].title;\r\n\t\t\t\tabs.description = model.statuses[i].description;\r\n\t\t\t\tabs.createdAt = new Date();\r\n\t\t\t\tabs.order = model.statuses[i].order;\r\n\t\t\t\tabs.templateId = modST.id;\r\n\t\t\t\tabs = await this._abstractStatusRepository.insert(abs);\r\n\t\t\t}\r\n\t\t\tawait uow.commit();\r\n\t\t} catch (err) { await uow.rollback(); throw err; } finally { await uow.release(); }\r\n\t\treturn Promise.resolve();\r\n\t}\r\n\r\n\tasync showTree(companyId: number): Promise<any> {\r\n\t\tlet trees = await this._companyRepository.getTree(companyId);\r\n\t\tlet treeFlatList: any[] = [];\r\n\r\n\t\tfor (let i = 0; i < trees[0].length; i++) {\r\n\t\t\tlet x = Object.assign(new ProjectTreeItem(), trees[0][i]);\r\n\t\t\ttreeFlatList.push(x);\r\n\t\t}\r\n\t\tlet ppl = this.populateTreeItems(treeFlatList);\r\n\t\tlet objP = this.makeObjects(ppl);\r\n\t\tlet lasts = this.getNestedTree(objP, null);\r\n\t\tlet arr = [];\r\n\r\n\t\t//TODO sadece ilk eleman geliyor tüm elemanları çevir\r\n\t\tfor (let i in lasts) {\r\n\t\t\tthis.convertToTreeView(lasts[i]);\r\n\t\t\tarr[i] = lasts[i];\r\n\t\t}\r\n\t\treturn Promise.resolve(arr);\r\n\t}\r\n\r\n\tasync getMembers(companyId: number): Promise<any> {\r\n\t\tlet userDtos: UserSummaryDto[] = [];\r\n\t\tlet cmpMbshipEns: CompanyMembershipEntity[];\r\n\t\tcmpMbshipEns = await this._companyMembershipRepository.list({ where: { companyId: companyId }, relations: [\"user\"] });\r\n\t\tfor (let i = 0; i < cmpMbshipEns.length; i++) {\r\n\t\t\tlet userDto = new UserSummaryDto();\r\n\t\t\tuserDto.id = cmpMbshipEns[i].user.id;\r\n\t\t\tuserDto.name = cmpMbshipEns[i].user.name;\r\n\t\t\tuserDto.surname = cmpMbshipEns[i].user.surname;\r\n\t\t\tuserDtos.push(userDto);\r\n\t\t}\r\n\t\treturn Promise.resolve(userDtos);\r\n\t}\r\n\r\n\tasync getstatusTemplates(companyId: number): Promise<any> {\r\n\t\tlet sTempEn = await this._statusTemplateRepository.list({ where: { companyId: companyId } });\r\n\t\treturn Promise.resolve(sTempEn);\r\n\t}\r\n\r\n\tprivate convertToTreeView(project) {\r\n\t\tfor (let st in project.statuses) {\r\n\t\t\tfor (let pr in project.statuses[st].projects) {\r\n\t\t\t\tthis.convertToTreeView(project.statuses[st].projects[pr]);\r\n\t\t\t}\r\n\t\t\tproject.statuses[st].children = project.statuses[st].projects;\r\n\t\t\tfor (let ts in project.statuses[st].tasks) {\r\n\t\t\t\tproject.statuses[st].tasks[ts].label = project.statuses[st].tasks[ts].title;\r\n\t\t\t\tproject.statuses[st].tasks[ts].icon = \"fas fa-wrench\";\r\n\t\t\t\tproject.statuses[st].tasks[ts].data = 2;\r\n\t\t\t\tproject.statuses[st].tasks[ts].styleClass = \"node-task\";\r\n\r\n\t\t\t}\r\n\t\t\tif (project.statuses[st].projects === undefined) {\r\n\t\t\t\tproject.statuses[st].children = [...project.statuses[st].tasks];\r\n\t\t\t} else {\r\n\t\t\t\tproject.statuses[st].children = [...project.statuses[st].projects, ...project.statuses[st].tasks];\r\n\t\t\t}\r\n\t\t\tproject.statuses[st].projects = undefined;\r\n\t\t\tproject.statuses[st].tasks = undefined;\r\n\t\t\tproject.statuses[st].label = project.statuses[st].title;\r\n\t\t\t// project.statuses[st].expandedIcon = \"fas fa-caret-down\";\r\n\t\t\t// project.statuses[st].collapsedIcon = \"fas fa-caret-right\";\r\n\t\t\tproject.statuses[st].data = 1;\r\n\t\t\tproject.statuses[st].styleClass = \"node-status\";\r\n\r\n\t\t}\r\n\t\tproject.label = project.title;\r\n\t\tproject.expandedIcon = \"fa fa-folder-open\";\r\n\t\tproject.collapsedIcon = \"fa fa-folder\";\r\n\t\tproject.data = 0;\r\n\t\tproject.styleClass = \"node-project\";\r\n\t\tproject.children = project.statuses;\r\n\t\tproject.statuses = undefined;\r\n\t}\r\n\r\n\tprivate getNestedTree(projects: ProjectTreeItem[], statusId: number) {\r\n\t\tlet out = [];\r\n\t\tfor (let i in projects) {\r\n\t\t\tif (projects[i].statusId == statusId) {\r\n\t\t\t\tfor (let st in projects[i].statuses) {\r\n\t\t\t\t\tlet children = this.getNestedTree(projects, projects[i].statuses[st].id);\r\n\t\t\t\t\tif (children.length) {\r\n\t\t\t\t\t\tprojects[i].statuses[st].projects = children;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tout.push(projects[i]);\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn out;\r\n\t}\r\n\r\n\tprivate populateTreeItems(flatList) {\r\n\t\tlet prGroup: any = _.groupBy(flatList, 'project_id');\r\n\t\tfor (let prKey in prGroup) {\r\n\t\t\tprGroup[prKey] = _.groupBy(prGroup[prKey], 'project_status_id');\r\n\t\t}\r\n\t\treturn prGroup;\r\n\t}\r\n\r\n\tprivate makeObjects(populated) {\r\n\t\tlet objs = [];\r\n\t\tfor (let prKey in populated) {\r\n\t\t\tlet prj: any = {};\r\n\t\t\tprj.id = null;\r\n\t\t\tprj.statuses = [];\r\n\t\t\tfor (let stKey in populated[prKey]) {\r\n\t\t\t\tlet st: any = {};\r\n\t\t\t\tst.id = null;\r\n\t\t\t\tst.tasks = [];\r\n\t\t\t\tfor (let tsKey in populated[prKey][stKey]) {\r\n\t\t\t\t\tlet it = populated[prKey][stKey][tsKey];\r\n\t\t\t\t\tlet ts: any = {};\r\n\t\t\t\t\tif (it.task_id !== null) {\r\n\t\t\t\t\t\tts.id = it.project_status_task_id;\r\n\t\t\t\t\t\tts.title = it.project_status_task_title;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (st.id === null) {\r\n\t\t\t\t\t\tst.id = it.project_status_id;\r\n\t\t\t\t\t\tst.title = it.project_status_title;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tif (ts.id !== null)\r\n\t\t\t\t\t\tst.tasks.push(ts);\r\n\t\t\t\t\tif (prj.id === null) {\r\n\t\t\t\t\t\tprj.id = it.project_id;\r\n\t\t\t\t\t\tprj.title = it.project_title;\r\n\t\t\t\t\t\tprj.statusId = it.project_statusId;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tif (st.id !== null)\r\n\t\t\t\t\tprj.statuses.push(st);\r\n\t\t\t}\r\n\t\t\tobjs.push(prj);\r\n\t\t}\r\n\t\treturn objs;\r\n\t}\r\n}\r\n","export { UserService } from './user.service';\r\nexport { QuestionService } from './question.service';\r\nexport { IssueService } from './issue.service';\r\nexport { CommentService } from './comment.service';\r\nexport { AnswerService } from './answer.service';\r\nexport { TaskService } from './task.service';\r\nexport { CompanyService } from './company.service';\r\nexport { ProjectService } from \"./project.service\";\r\n","import { IIssueService } from \"@services/abstract\";\r\nimport { injectable, inject } from \"inversify\";\r\nimport { InjectTypes } from \"@ioc\";\r\nimport { IIssueRepository } from \"@repositories/abstract\";\r\nimport { IssueCreateDto, IssueListDto, IssueDetailDto, IssueUpdateDto } from \"@models/dtos\";\r\nimport { IssueEntity } from \"@entities/issue.entity\";\r\nimport { IssueFilter } from \"@models/filters\";\r\nimport { AppError } from \"@errors/app-error\";\r\n\r\n@injectable()\r\nexport class IssueService implements IIssueService {\r\n\r\n    constructor(\r\n        @inject(InjectTypes.Repository.ISSUE) private readonly _issueRepository: IIssueRepository\r\n    ) { }\r\n\r\n    add(model: IssueCreateDto): Promise<number> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            //TODO yetkisi var mı diye kontrol et\r\n            let issueEn: IssueEntity = Object.assign(new IssueEntity(), model);\r\n            this._issueRepository.insert(issueEn).then((res) => {\r\n                resolve(res.id);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    list(filters: IssueFilter, requestorId: number): Promise<IssueListDto[]> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    find(id: number, requestorId: number): Promise<IssueDetailDto> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    update(id: number, model: IssueUpdateDto, requestorId: number) {\r\n        return new Promise<any>((resolve, reject) => {\r\n            let oldIssue: IssueEntity;\r\n            let updatedIssue: IssueEntity;\r\n            this._issueRepository.findById(id).then((foundIssue) => {\r\n                oldIssue = foundIssue;\r\n                if (!foundIssue) throw new AppError('AppError', 'Issue not found.', 404);\r\n                //TODO yetkisi var mı diye kontrol et\r\n                updatedIssue = Object.assign(oldIssue, model);\r\n                return this._issueRepository.update(id, updatedIssue);\r\n            }).then(() => {\r\n                resolve(updatedIssue);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    delete(id: number, requestorId: number) {\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._issueRepository.findById(id).then((foundIssue) => {\r\n                if (!foundIssue) throw new AppError('AppError', 'Issue not found.', 404);\r\n                //TODO yetkisi var mı diye kontrol et\r\n                return this._issueRepository.delete(id);\r\n            }).then(() => {\r\n                resolve();\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    //TODO Auth fonksiyonu yaz\r\n\r\n}\r\n","import { IProjectService } from \"@services/abstract\";\r\nimport { injectable, inject } from \"inversify\";\r\nimport { InjectTypes } from \"@ioc\";\r\nimport { IProjectRepository, IStatusRepository, ICompanyRepository, ICompanyMembershipRepository, IUserRepository, IProjectMembershipRepository, IStatusTemplateRepository } from \"@repositories/abstract\";\r\nimport { ProjectListDto, ProjectDetailDto, ProjectUpdateDto, UserSummaryDto, ProjectUserRegisterDto, ProjectCreateDto } from \"@models/dtos\";\r\nimport { ProjectEntity } from \"@entities/project.entity\";\r\nimport { ProjectFilter } from \"@models/filters\";\r\nimport { AppError } from \"@errors/app-error\";\r\nimport { StatusEntity } from \"@entities/status.entity\";\r\nimport { BaseStatus } from \"@enums\";\r\nimport { Uow } from \"@repositories/uow\";\r\nimport { CompanyMembershipEntity } from \"@entities/company-membership.entity\";\r\nimport { UserEntity } from \"@entities/user.entity\";\r\nimport { ProjectMembershipEntity } from \"@entities/project-membership.entity\";\r\nimport { TreeExplorerItem } from \"@models\";\r\n\r\n@injectable()\r\nexport class ProjectService implements IProjectService {\r\n\r\n  constructor(\r\n    @inject(InjectTypes.Repository.PROJECT) private readonly _projectRepository: IProjectRepository,\r\n    @inject(InjectTypes.Repository.STATUS) private readonly _statusRepository: IStatusRepository,\r\n    @inject(InjectTypes.Repository.COMPANY) private readonly _companyRepository: ICompanyRepository,\r\n    @inject(InjectTypes.Repository.COMPANY_MEMBERSHIP) private readonly _companyMembershipRepository: ICompanyMembershipRepository,\r\n    @inject(InjectTypes.Repository.PROJECT_MEMBERSHIP) private readonly _projectMembershipRepository: IProjectMembershipRepository,\r\n    @inject(InjectTypes.Repository.STATUS_TEMPLATE) private readonly _statusTemplateRepository: IStatusTemplateRepository\r\n\r\n  ) { }\r\n\r\n  //Yalnızca sahibi ekleyebilir\r\n  async add(model: ProjectCreateDto): Promise<number> {\r\n    let companyEn = await this._companyRepository.findOne(model.companyId, { relations: [] });\r\n    if (!companyEn)\r\n      throw new AppError('AppError', 'Company Not Found', 404);\r\n\r\n    console.log(\"Owner:\", companyEn.ownerId);\r\n    console.log(\"Model:\", model.creatorId)\r\n    if (companyEn.ownerId !== model.creatorId)\r\n      throw new AppError('AppError', 'You can not add a new project to company which is not yours', 403);\r\n    let prjEn: ProjectEntity;\r\n    let uow = new Uow();\r\n    await uow.start();\r\n    try {\r\n      prjEn = new ProjectEntity();\r\n      prjEn.companyId = model.companyId;\r\n      prjEn.creatorId = model.creatorId;\r\n      prjEn.title = model.title;\r\n      prjEn.description = model.description;\r\n      prjEn.createdAt = new Date();\r\n      prjEn.lastUpdated = new Date();\r\n      prjEn.prefix = model.prefix;\r\n      if (model.parentId && model.statusId) {\r\n        prjEn.parentId = model.parentId;\r\n        prjEn.statusId = model.statusId;\r\n      } else if (!model.parentId && !model.statusId) {\r\n        //First Parent\r\n      } else {\r\n        //TODO bu kontrol middleware'da yapılacak\r\n        throw new AppError('AppError', 'Bad project model', 422);\r\n      }\r\n      //TODO status template de ekle\r\n      prjEn = await this._projectRepository.insert(prjEn, uow.getManager());\r\n\r\n      let sTempEn = await this._statusTemplateRepository.findOne(model.templateId, { relations: [\"statuses\"] });\r\n\r\n      for (let i = 0; i < sTempEn.statuses.length; i++) {\r\n        const abs = sTempEn.statuses[i];\r\n        let st = new StatusEntity();\r\n        st.baseStatus = abs.baseStatus;\r\n        st.createdAt = new Date();\r\n        st.creatorId = model.creatorId;\r\n        st.description = \"desc\";\r\n        st.lastUpdated = new Date();\r\n        st.order = abs.order;\r\n        st.projectId = prjEn.id;\r\n        st.title = abs.title;\r\n        st = await this._statusRepository.insert(st, uow.getManager());\r\n      }\r\n\r\n      await uow.commit();\r\n    } catch (err) { await uow.rollback(); throw err; } finally { await uow.release(); }\r\n    return Promise.resolve(prjEn.id);\r\n  }\r\n\r\n  //sadece ayni sirkettekiler erisebilir\r\n  async listByCompany(filters: ProjectFilter, requestorId: number, companyId: number): Promise<ProjectListDto[]> {\r\n    let projectDtos: ProjectListDto[] = [];\r\n    // const memberEn: CompanyMembershipEntity = await this._companyMembershipRepository.findOne(null, { where: { userId: requestorId, companyId: companyId } });\r\n    // if (!memberEn && memberEn.company.owner.id !== requestorId)\r\n    //   throw new AppError('AppError', 'You are not part of this company', 403);\r\n    let projects = await this._projectRepository.listByFiltersByCompany(filters, companyId);\r\n    projects.map((prj) => {\r\n      let projectDto = Object.assign(new ProjectListDto(), prj);\r\n      projectDtos.push(projectDto);\r\n    });\r\n    return Promise.resolve(projectDtos);\r\n  }\r\n\r\n  async list(filters: ProjectFilter, requestorId: number): Promise<ProjectListDto[]> {\r\n    let projectDtos: ProjectListDto[] = [];\r\n    let projects = await this._projectRepository.listByFilters(filters);\r\n    projects.map((prj) => {\r\n      let projectDto = Object.assign(new ProjectListDto(), prj);\r\n      projectDtos.push(projectDto);\r\n    });\r\n    return Promise.resolve(projectDtos);\r\n  }\r\n\r\n  //sadece ayni sirkettekiler erisebilir\r\n  async find(id: number, requestorId: number): Promise<ProjectDetailDto> {\r\n    let rtpEn = await this._projectRepository.findForDetails(id);\r\n    if (!rtpEn) throw new AppError('AppError', 'Project not found.', 404);\r\n    const memberEn: CompanyMembershipEntity = await this._companyMembershipRepository.findOne(null, { where: { userId: requestorId, companyId: rtpEn.company.id } });\r\n    if (!memberEn && rtpEn.company.owner.id !== requestorId)\r\n      throw new AppError('AppError', 'You are not part of this company', 403);\r\n    let prjDto: ProjectDetailDto = Object.assign(new ProjectDetailDto(), rtpEn);\r\n    return Promise.resolve(prjDto);\r\n  }\r\n\r\n  //yalnızca sirket sahibi izinlidir\r\n  async update(id: number, model: ProjectUpdateDto, requestorId: number) {\r\n    let updatedProject: ProjectEntity;\r\n    let oldProject: ProjectEntity = await this._projectRepository.findById(id);\r\n    if (!oldProject) throw new AppError('AppError', 'Project not found.', 404);\r\n    const companyEn = await this._companyRepository.findOne(oldProject.companyId, { relations: [] });\r\n    if (!companyEn)\r\n      throw new AppError('AppError', 'Company Not Found', 404);\r\n    if (companyEn.ownerId !== requestorId)\r\n      throw new AppError('AppError', 'You can not update this project', 403);\r\n    updatedProject = Object.assign(oldProject, model);\r\n    await this._projectRepository.update(id, updatedProject);\r\n    return Promise.resolve(updatedProject);\r\n  }\r\n\r\n  //yalnızca sirket sahibi izinlidir\r\n  async delete(id: number, requestorId: number) {\r\n    let projectEntity: ProjectEntity = await this._projectRepository.findById(id);\r\n    if (!projectEntity) throw new AppError('AppError', 'Project not found.', 404);\r\n    const companyEn = await this._companyRepository.findOne(projectEntity.companyId, { relations: [] });\r\n    if (!companyEn)\r\n      throw new AppError('AppError', 'Company Not Found', 404);\r\n    if (companyEn.ownerId !== requestorId)\r\n      throw new AppError('AppError', 'You can not delete this project', 403);\r\n    await this._projectRepository.delete(id);\r\n    return Promise.resolve();\r\n  }\r\n\r\n  async getMembers(id: number, requestorId: number): Promise<UserSummaryDto[]> {\r\n    let userDtos: UserSummaryDto[] = [];\r\n    let projectMbshipEns: ProjectMembershipEntity[];\r\n    projectMbshipEns = await this._projectMembershipRepository.list({ where: { projectId: id }, relations: [\"user\"] });\r\n    for (let i = 0; i < projectMbshipEns.length; i++) {\r\n      let userDto = new UserSummaryDto();\r\n      userDto.id = projectMbshipEns[i].user.id;\r\n      userDto.name = projectMbshipEns[i].user.name;\r\n      userDto.surname = projectMbshipEns[i].user.surname;\r\n      userDtos.push(userDto);\r\n    }\r\n    return Promise.resolve(userDtos);\r\n  }\r\n\r\n  //Todo projenin bolunduğu şirketin üyesi mi diye kontrol edilecek. Yetkli kontrolü yapılacak\r\n  async addMember(id: number, model: ProjectUserRegisterDto): Promise<void> {\r\n    let prjMbshipEn: ProjectMembershipEntity = new ProjectMembershipEntity();\r\n    prjMbshipEn.userId = model.userId;\r\n    // prjMbshipEn.projectId = id;\r\n    prjMbshipEn.createdAt = new Date();\r\n    await this._projectMembershipRepository.insert(prjMbshipEn);\r\n    return Promise.resolve();\r\n  }\r\n\r\n}\r\n","import { IQuestionService } from \"@services/abstract\";\r\nimport { injectable, inject } from \"inversify\";\r\nimport { InjectTypes } from \"@ioc\";\r\nimport { IQuestionRepository } from \"@repositories/abstract\";\r\nimport { QuestionCreateDto, QuestionListDto, QuestionDetailDto, QuestionUpdateDto } from \"@models/dtos\";\r\nimport { QuestionEntity } from \"@entities/question.entity\";\r\nimport { QuestionFilter } from \"@models/filters\";\r\nimport { AppError } from \"@errors/app-error\";\r\n\r\n@injectable()\r\nexport class QuestionService implements IQuestionService {\r\n\r\n    constructor(\r\n        @inject(InjectTypes.Repository.QUESTION) private readonly _questionRepository: IQuestionRepository\r\n    ) { }\r\n    add(model: QuestionCreateDto): Promise<number> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            //TODO yetkisi var mı diye kontrol et\r\n            let questionEn: QuestionEntity = Object.assign(new QuestionEntity(), model);\r\n            this._questionRepository.insert(questionEn).then((res) => {\r\n                resolve(res.id);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    list(filters: QuestionFilter, requestorId: number): Promise<QuestionListDto[]> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    find(id: number, requestorId: number): Promise<QuestionDetailDto> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    update(id: number, model: QuestionUpdateDto, requestorId: number) {\r\n        return new Promise<any>((resolve, reject) => {\r\n            let oldQuestion: QuestionEntity;\r\n            let updatedQuestion: QuestionEntity;\r\n            this._questionRepository.findById(id).then((foundQuestion) => {\r\n                oldQuestion = foundQuestion;\r\n                if (!foundQuestion) throw new AppError('AppError', 'Question not found.', 404);\r\n                //TODO yetkisi var mı diye kontrol et\r\n                updatedQuestion = Object.assign(oldQuestion, model);\r\n                return this._questionRepository.update(id, updatedQuestion);\r\n            }).then(() => {\r\n                resolve(updatedQuestion);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    delete(id: number, requestorId: number) {\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._questionRepository.findById(id).then((foundQuestion) => {\r\n                if (!foundQuestion) throw new AppError('AppError', 'Question not found.', 404);\r\n                //TODO yetkisi var mı diye kontrol et\r\n                return this._questionRepository.delete(id);\r\n            }).then(() => {\r\n                resolve();\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n\r\n    //TODO Auth fonksiyonu yaz\r\n\r\n}\r\n","import { injectable, inject } from \"inversify\";\r\nimport { InjectTypes } from \"../../ioc\";\r\nimport { AppError } from '../../errors/app-error';\r\nimport { ITaskRepository, IProjectRepository, ITaskAssignmentRepository } from \"@repositories/abstract\";\r\nimport { TaskCreateDto, TaskUpdateDto, TaskDetailDto, TaskListDto, TaskStatusUpdateDto } from \"@models/dtos\";\r\nimport { TaskFilter } from \"@models/filters/task-filter\";\r\nimport { ITaskService } from \"@services/abstract/i-task.service\";\r\nimport { TaskEntity } from \"@entities/task.entity\";\r\nimport { TaskAssignmentEntity } from \"@entities/task-assignment.entity\";\r\nimport { TaskTypes } from \"@enums\";\r\n\r\n\r\n@injectable()\r\nexport class TaskService implements ITaskService {\r\n    convertToProject(id: number, requestorId: number): Promise<TaskDetailDto> {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n  constructor(\r\n    @inject(InjectTypes.Repository.TASK) private readonly _taskRepository: ITaskRepository,\r\n    @inject(InjectTypes.Repository.PROJECT) private readonly _projectRepository: IProjectRepository,\r\n    @inject(InjectTypes.Repository.TASK_ASSIGNMENT) private readonly _taskAssignmentRepository: ITaskAssignmentRepository\r\n  ) { }\r\n\r\n  //TODO kullanıcıyı göreve atama işlemi transactionda olacak.\r\n  async add(model: TaskCreateDto): Promise<number> {\r\n    let prjEn = await this._projectRepository.findOne(model.projectId, { relations: [\"statuses\"] });\r\n    if (!prjEn)\r\n      throw new AppError('AppError', 'Böyle bir proje yok.', 404);\r\n    if (prjEn.statuses.filter(x => x.id === model.statusId).length < 1) {\r\n      throw new AppError('AppError', 'Bilinmeyen aşama.', 404);\r\n    }\r\n    let taskEn: TaskEntity = Object.assign(new TaskEntity(), model);\r\n    taskEn.createdAt = new Date();\r\n    taskEn.lastUpdated = new Date();\r\n    //TODO max değeri getirip +1ini al\r\n    taskEn.code = 45;\r\n    let inserted: TaskEntity = await this._taskRepository.insert(taskEn);\r\n    console.log(inserted);\r\n    await this.assignMembers(inserted.id, model.assignees);\r\n    return Promise.resolve(inserted.id);\r\n  }\r\n\r\n  //TODO bu idye sahip kişiler gerçenten taskın ait olduğu projenin üyesi mi kontrol et, transaction yap\r\n  async assignMembers(taskId: number, members: number[]) {\r\n    for (let i = 0; i < members.length; i++) {\r\n      let tskAsgEn: TaskAssignmentEntity = new TaskAssignmentEntity();\r\n      tskAsgEn.taskId = taskId;\r\n      tskAsgEn.userId = members[i];\r\n      tskAsgEn.createdAt = new Date();\r\n      await this._taskAssignmentRepository.insert(tskAsgEn);\r\n    }\r\n    return Promise.resolve();\r\n  }\r\n\r\n  // async convertToProject(id: number, requestorId: number, statusTemplateId: number) {\r\n  //\r\n  // }\r\n\r\n  async list(filters: TaskFilter, requestorId: number) {\r\n    let taskDtos: TaskListDto[] = [];\r\n    let tasks = await this._taskRepository.listByFilters(filters);\r\n    tasks.map((tsk) => {\r\n      let taskDto = Object.assign(new TaskListDto(), tsk, { comments: undefined })\r\n      taskDto.commentCount = tsk.comments.length;\r\n      taskDtos.push(taskDto);\r\n    });\r\n    return Promise.resolve(taskDtos);\r\n  }\r\n\r\n  async find(id: number, requestorId: number): Promise<TaskDetailDto> {\r\n    let taskEn: TaskEntity = await this._taskRepository.findForDetails(id);\r\n    if (!taskEn) throw new AppError('AppError', 'Task not found.', 404);\r\n    let taskDto: TaskDetailDto = Object.assign(new TaskDetailDto(), taskEn, {  users: undefined });\r\n    return Promise.resolve(taskDto);\r\n  }\r\n\r\n  //TODO update entity donmemeli\r\n  update(id: number, model: TaskUpdateDto, requestorId: number): Promise<TaskEntity> {\r\n    return new Promise<any>((resolve, reject) => {\r\n      let oldTask: TaskEntity;\r\n      let updatedTask: TaskEntity;\r\n      this._taskRepository.findById(id).then((foundTask) => {\r\n        oldTask = foundTask;\r\n        if (!foundTask) throw new AppError('AppError', 'Task not found.', 404);\r\n        updatedTask = Object.assign(oldTask, model);\r\n        return this._taskRepository.update(id, updatedTask);\r\n      }).then(() => {\r\n        resolve(updatedTask);\r\n      }).catch((err) => {\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  delete(id: number, requestorId: number) {\r\n    return new Promise<any>((resolve, reject) => {\r\n      this._taskRepository.findById(id).then((foundTask) => {\r\n        if (!foundTask) throw new AppError('AppError', 'Task not found.', 404);\r\n        return this._taskRepository.delete(id);\r\n      }).then(() => {\r\n        resolve();\r\n      }).catch((err) => {\r\n        reject(err);\r\n      });\r\n    });\r\n  }\r\n\r\n  async changeStatus(id: number, model: TaskStatusUpdateDto): Promise<void> {\r\n    let updatedTask: TaskEntity;\r\n    let oldTask: TaskEntity = await this._taskRepository.findById(id);\r\n    if (!oldTask) throw new AppError('AppError', 'Task not found.', 404);\r\n    updatedTask = Object.assign(oldTask, model);\r\n    updatedTask.lastUpdated = new Date();\r\n    await this._taskRepository.update(id, updatedTask);\r\n    return Promise.resolve();\r\n  }\r\n\r\n\r\n  // private validateAuthority(projectId: number, userId: number): Promise<void> {\r\n  //   return new Promise<any>((resolve, reject) => {\r\n  //     this._projectRepository.findOne(projectId, { relations: [\"users\", \"creator\"] }).then((res) => {\r\n  //       let prjct = res;\r\n  //       if (prjct.members.filter(x => x.userId === userId).length < 1 && prjct.creator.id !== userId)\r\n  //         throw new AppError('AppError', 'Bu projede yetkiniz yoktur.', 403);\r\n  //       resolve();\r\n  //     }).catch((err) => {\r\n  //       reject(err);\r\n  //     });\r\n  //   });\r\n  // }\r\n}\r\n\r\n\r\n//TODO task silme ve update işlemlerinde auth için başka kısıtlar da ekle şuanda projeye dahil olan herkes herhangi bir task üzerinde işlem yapabilir.\r\n","import { IUserRepository } from \"../../@repository/abstract/i-user.repository\";\r\nimport { injectable, inject } from \"inversify\";\r\nimport { IUserService } from \"../abstract/i-user.service\";\r\nimport { InjectTypes } from \"../../ioc\";\r\nimport { UserEntity } from \"../../entities/user.entity\";\r\nimport { LoginDto } from \"../../_models/dtos/user/login.dto.model\";\r\nimport { RegisterDto } from \"../../_models/dtos/user/register.dto\";\r\nimport { DecodedTokenModel } from \"../../_models/decoded-token.model\";\r\nimport { AppError } from \"../../errors/app-error\";\r\nimport * as jwt from 'jsonwebtoken';\r\n@injectable()\r\nexport class UserService implements IUserService {\r\n\r\n    constructor(\r\n        @inject(InjectTypes.Repository.USER) private readonly _userRepository: IUserRepository\r\n    ) { }\r\n\r\n    public list(filters) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    public find(id: number) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    public update(model: any) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n    public delete(id: number) {\r\n        throw new Error(\"Method not implemented.\");\r\n    }\r\n\r\n    public login(model: LoginDto): Promise<any> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            this._userRepository.findByLogin(model.email, model.password).then((found_user) => {\r\n                console.log(found_user);\r\n                if (!found_user) {\r\n                    throw new AppError(\r\n                        'AppError',\r\n                        'Wrong Username or Password.',\r\n                        404\r\n                    );\r\n                }\r\n                console.log(\"Found User : \", found_user);\r\n                let decodedToken: DecodedTokenModel = {\r\n                    id: found_user.id,\r\n                    username: found_user.username,\r\n                    email: found_user.email,\r\n                    name: found_user.name,\r\n                    surname: found_user.surname\r\n                }\r\n                let token = jwt.sign({\r\n                    ...decodedToken\r\n                }, 'MySecret', { expiresIn: 86400000 });\r\n                let loginResult: any = {\r\n                    id: found_user.id,\r\n                    email: found_user.email,\r\n                    token: token\r\n                }\r\n                resolve(loginResult);\r\n            }).catch((error) => {\r\n                reject(error)\r\n            });\r\n        })\r\n    }\r\n\r\n    public register(model: RegisterDto) {\r\n        return new Promise<any>((resolve, reject) => {\r\n            this.checkUniqueness(model.email, model.username).then(() => {\r\n                let user: UserEntity = Object.assign(new UserEntity(), model, { createdAt: new Date });\r\n                return this._userRepository.insert(user);\r\n            }).then((res) => {\r\n                resolve(res);\r\n            }).catch((err) => {\r\n                reject(err);\r\n            });\r\n        });\r\n    }\r\n\r\n    private checkUniqueness(email: string, username: string): Promise<void> {\r\n        return new Promise<any>((resolve, reject) => {\r\n            let query = {\r\n                where: [\r\n                    { email: email },\r\n                    { username: username }\r\n                ]\r\n            }\r\n            this._userRepository.list(query).then((users) => {\r\n                if (users.length > 0) {\r\n                    if (users[0].email === email)\r\n                        throw new AppError('AppError', 'This email is already taken', 422);\r\n                    else\r\n                        throw new AppError('AppError', 'This username is already taken', 422);\r\n                }\r\n                resolve();\r\n            }).catch((err) => {\r\n                reject(err);\r\n            })\r\n        });\r\n    }\r\n\r\n}","import { IsNumber, IsString } from \"class-validator\";\r\n\r\nexport class AbstractStatusCreateDto {\r\n  @IsNumber()\r\n  public baseStatus: number;\r\n\r\n  @IsNumber()\r\n  public order: number;\r\n\r\n  @IsString()\r\n  public title: string;\r\n\r\n  @IsString()\r\n  public description: string;\r\n}\r\n","import { IsString, IsNotEmpty } from 'class-validator';\r\n\r\nexport class AnswerCreateDto {\r\n\r\n    @IsString()\r\n    public content: string;\r\n\r\n    @IsNotEmpty()\r\n    public questionId: number;\r\n\r\n    public creatorId: number;\r\n\r\n}\r\n","import { UserSummaryDto } from \"..\";\r\n\r\nexport class AnswerDetailDto {\r\n    id: number;\r\n    content: string;\r\n    questionId:number;\r\n    creator: UserSummaryDto;\r\n}\r\n","import { UserSummaryDto } from \"..\";\r\n\r\nexport class AnswerListDto {\r\n    id: number;\r\n    content: string;\r\n    questionId:number;\r\n    creator: UserSummaryDto;\r\n}\r\n","import { UserSummaryDto } from \"..\";\r\n\r\nexport class AnswerSummaryDto {\r\n    id: number;\r\n    content: string;\r\n    questionId:number;\r\n    creator: UserSummaryDto;\r\n}\r\n","import { IsString } from 'class-validator';\r\n\r\nexport class AnswerUpdateDto {\r\n\r\n    @IsString()\r\n    public content: string;\r\n\r\n}\r\n","import { IsString, IsNotEmpty } from 'class-validator';\r\n\r\nexport class CommentCreateDto {\r\n\r\n    @IsString()\r\n    public content: string;\r\n\r\n    @IsNotEmpty()\r\n    public taskId: number;\r\n\r\n    public userId: number;\r\n\r\n}\r\n","import { UserSummaryDto } from \"..\";\r\n\r\nexport class CommentDetailDto {\r\n    id: number;\r\n    content: string;\r\n    taskId: number;\r\n    creator: UserSummaryDto;\r\n}\r\n","import { UserSummaryDto } from \"..\";\r\n\r\nexport class CommentListDto {\r\n    id: number;\r\n    content: string;\r\n    taskId: number;\r\n    creator: UserSummaryDto;\r\n}\r\n","import { UserSummaryDto } from \"..\";\r\n\r\nexport class CommentSummaryDto {\r\n    id: number;\r\n    content: string;\r\n    taskId: number;\r\n    creator: UserSummaryDto;\r\n}\r\n","import { IsString } from 'class-validator';\r\n\r\nexport class CommentUpdateDto {\r\n\r\n    @IsString()\r\n    public content: string;\r\n}\r\n","import { IsString } from 'class-validator';\r\n\r\nexport class CompanyCreateDto {\r\n\r\n    @IsString()\r\n    public name: string;\r\n\r\n    @IsString()\r\n    public description: string;\r\n\r\n    public ownerId: number;\r\n\r\n}\r\n","import { UserSummaryDto } from \"@models/dtos\";\r\n\r\nexport class CompanyDetailDto {\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    owner: UserSummaryDto;\r\n    userCount: number = 0;\r\n    projectCount: number = 0;\r\n}\r\n","import { UserSummaryDto } from \"@models/dtos\";\r\n\r\nexport class CompanyListDto {\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    owner: UserSummaryDto;\r\n    userCount: number = 0;\r\n    projectCount: number = 0;\r\n}\r\n","import { UserSummaryDto } from \"..\";\r\n\r\nexport class CompanySummaryDto {\r\n    id: number;\r\n    name: string;\r\n    description: string;\r\n    owner: UserSummaryDto;\r\n}\r\n","import { IsString } from 'class-validator';\r\n\r\nexport class CompanyUpdateDto {\r\n\r\n    @IsString()\r\n    public name: string;\r\n\r\n    @IsString()\r\n    public description: string;\r\n\r\n}\r\n","import { IsNumber } from \"class-validator\";\r\n\r\nexport class CompanyUserRegisterDto {\r\n\r\n    @IsNumber()\r\n    userId: number;\r\n}\r\n","export { AbstractStatusCreateDto } from './abstract-status/abstract-status-create.dto'\r\n\r\n\r\nexport { AnswerUpdateDto } from './answer/answer-update.dto';\r\nexport { AnswerCreateDto } from './answer/answer-create.dto';\r\nexport { AnswerDetailDto } from './answer/answer-detail.dto';\r\nexport { AnswerListDto } from './answer/answer-list.dto';\r\nexport { AnswerSummaryDto } from './answer/answer-summary.dto';\r\n\r\nexport { CommentUpdateDto } from './comment/comment-update.dto';\r\nexport { CommentCreateDto } from './comment/comment-create.dto';\r\nexport { CommentDetailDto } from './comment/comment-detail.dto';\r\nexport { CommentListDto } from './comment/comment-list.dto';\r\nexport { CommentSummaryDto } from './comment/comment-summary.dto';\r\n\r\nexport { TaskUpdateDto } from './task/task-update.dto';\r\nexport { TaskCreateDto } from './task/task-create.dto';\r\nexport { TaskDetailDto } from './task/task-detail.dto';\r\nexport { TaskListDto } from './task/task-list.dto';\r\nexport { TaskSummaryDto } from './task/task-summary.dto';\r\nexport { TaskStatusUpdateDto } from './task/task-status-update.dto';\r\n\r\nexport { CompanyUpdateDto } from './company/company-update.dto';\r\nexport { CompanyCreateDto } from './company/company-create.dto';\r\nexport { CompanyDetailDto } from './company/company-detail.dto';\r\nexport { CompanyListDto } from './company/company-list.dto';\r\nexport { CompanySummaryDto } from './company/company-summary.dto';\r\nexport { CompanyUserRegisterDto } from './company/company-user-register.dto';\r\n\r\nexport { IssueUpdateDto } from './issue/issue-update.dto';\r\nexport { IssueCreateDto } from './issue/issue-create.dto';\r\nexport { IssueDetailDto } from './issue/issue-detail.dto';\r\nexport { IssueListDto } from './issue/issue-list.dto';\r\nexport { IssueSummaryDto } from './issue/issue-summary.dto';\r\n\r\nexport { ProjectUpdateDto } from './project/project-update.dto';\r\nexport { ProjectCreateDto } from './project/project-create.dto';\r\nexport { ProjectDetailDto } from './project/project-detail.dto';\r\nexport { ProjectListDto } from './project/project-list.dto';\r\nexport { ProjectSummaryDto } from './project/project-summary.dto';\r\nexport { ProjectAssignManagerDto } from './project/project-assign-manager.dto';\r\nexport { ProjectUserRegisterDto } from './project/project-user-register.dto';\r\n\r\nexport { QuestionUpdateDto } from './question/question-update.dto';\r\nexport { QuestionCreateDto } from './question/question-create.dto';\r\nexport { QuestionDetailDto } from './question/question-detail.dto';\r\nexport { QuestionListDto } from './question/question-list.dto';\r\nexport { QuestionSummaryDto } from './question/question-summary.dto';\r\n\r\n\r\nexport { LoginDto } from './user/login.dto.model';\r\nexport { RegisterDto } from './user/register.dto';\r\nexport { UserSummaryDto } from './user/user-summary.dto';\r\n\r\nexport { StatusSummaryDto } from './status/status-summary.dto';\r\n\r\nexport {AddStatusTemplateDto} from './status-template/add-status-template.dto'\r\n","import { IsString, IsInt, IsNotEmpty, IsNumber } from 'class-validator';\r\n\r\nexport class IssueCreateDto {\r\n\r\n    @IsString()\r\n    public title: string;\r\n\r\n    @IsString()\r\n    public description: string;\r\n\r\n    @IsNotEmpty()\r\n    public projectId: number;\r\n\r\n    public creatorId: number;\r\n\r\n}","import { UserSummaryDto } from \"..\";\r\nimport { TaskSummaryDto } from \"../task/task-summary.dto\";\r\n\r\nexport class IssueDetailDto {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n    tasks: TaskSummaryDto;\r\n    creator: UserSummaryDto;\r\n    //TODO yorumlar\r\n}\r\n","import { UserSummaryDto } from \"..\";\r\n\r\nexport class IssueListDto {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n    creator: UserSummaryDto;\r\n    commentCount: number = 0;\r\n}\r\n","import { UserSummaryDto } from \"..\";\r\n\r\nexport class IssueSummaryDto {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n    creator: UserSummaryDto;\r\n}\r\n","import { IsString } from 'class-validator';\r\n\r\nexport class IssueUpdateDto {\r\n\r\n    @IsString()\r\n    public title: string;\r\n\r\n    @IsString()\r\n    public description: string;\r\n\r\n}\r\n","import { IsNumber } from \"class-validator\";\r\n\r\nexport class ProjectAssignManagerDto {\r\n\r\n    @IsNumber()\r\n    userId: number;\r\n}\r\n","import { IsString, IsInt, IsNotEmpty, IsNumber } from 'class-validator';\r\n\r\nexport class ProjectCreateDto {\r\n\r\n  @IsString()\r\n  public title: string;\r\n\r\n  @IsString()\r\n  public description: string;\r\n\r\n  @IsString()\r\n  public prefix: string;\r\n\r\n  @IsNumber()\r\n  public companyId: number;\r\n\r\n  // @IsNumber()\r\n  public parentId: number;\r\n\r\n  // @IsNumber()\r\n  public statusId: number;\r\n\r\n  @IsNumber()\r\n  public templateId: number;\r\n\r\n  public members: number[]\r\n\r\n  public creatorId: number;\r\n\r\n}\r\n\r\n//TODO validationları düzelt\r\n","import { UserSummaryDto } from \"..\";\r\nimport { CompanySummaryDto } from \"../company/company-summary.dto\";\r\n\r\nexport class ProjectDetailDto {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n    company: CompanySummaryDto;\r\n    creator: UserSummaryDto;\r\n    userCount: number;\r\n    taskCount: number;\r\n    issueCount: number;\r\n}\r\n","import { UserSummaryDto } from \"..\";\r\nimport { CompanySummaryDto } from \"../company/company-summary.dto\";\r\n\r\nexport class ProjectListDto {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n    company: CompanySummaryDto;\r\n    creator: UserSummaryDto;\r\n    userCount: number;\r\n    taskCount: number;\r\n    issueCount: number;\r\n}\r\n","import { UserSummaryDto } from \"..\";\r\n\r\nexport class ProjectSummaryDto {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n    creator: UserSummaryDto;\r\n}\r\n","import { IsString } from 'class-validator';\r\n\r\nexport class ProjectUpdateDto {\r\n\r\n    @IsString()\r\n    public title: string;\r\n\r\n    @IsString()\r\n    public description: string;\r\n\r\n}\r\n","import { IsNumber } from \"class-validator\";\r\n\r\nexport class ProjectUserRegisterDto {\r\n    @IsNumber()\r\n    userId: number;\r\n}\r\n","import { IsString, IsNotEmpty } from 'class-validator';\r\n\r\nexport class QuestionCreateDto {\r\n\r\n    @IsString()\r\n    public title: string;\r\n\r\n    @IsString()\r\n    public content: string;\r\n\r\n    @IsNotEmpty()\r\n    public projectId: number;\r\n\r\n    public creatorId: number;\r\n\r\n}\r\n","import { UserSummaryDto } from \"..\";\r\n\r\nexport class QuestionDetailDto {\r\n    id: number;\r\n    title: string;\r\n    content: string;\r\n    creator: UserSummaryDto;\r\n    answerCount: number;\r\n    projectId: number;\r\n}\r\n","import { UserSummaryDto } from \"..\";\r\n\r\nexport class QuestionListDto {\r\n    id: number;\r\n    title: string;\r\n    content: string;\r\n    creator: UserSummaryDto;\r\n    answerCount: number;\r\n    projectId: number;\r\n}\r\n","import { UserSummaryDto } from \"..\";\r\n\r\nexport class QuestionSummaryDto {\r\n    id: number;\r\n    title: string;\r\n    content: string;\r\n    creator: UserSummaryDto;\r\n    answerCount: number;\r\n    projectId: number;\r\n}\r\n","import { IsString } from 'class-validator';\r\n\r\nexport class QuestionUpdateDto {\r\n\r\n    @IsString()\r\n    public title: string;\r\n\r\n    @IsString()\r\n    public content: string;\r\n\r\n}\r\n","import { IsString, IsNumber, ValidateNested, IsArray } from \"class-validator\";\r\nimport { AbstractStatusCreateDto } from \"../abstract-status/abstract-status-create.dto\";\r\nimport { Type } from \"class-transformer\";\r\n\r\nexport class AddStatusTemplateDto {\r\n  @IsString()\r\n  public name: string;\r\n\r\n  @IsNumber()\r\n  public companyId: number;\r\n\r\n  public creatorId: number;\r\n\r\n  // @ValidateNested()\r\n  // @Type(type => AbstractStatusCreateDto)\r\n  // @IsArray()\r\n  public statuses: AbstractStatusCreateDto[];\r\n\r\n}\r\n","export class StatusSummaryDto {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n}\r\n","import { IsString, IsInt, IsNotEmpty, IsNumber, IsOptional } from 'class-validator';\r\n\r\nexport class TaskCreateDto {\r\n\r\n  @IsString()\r\n  public title: string;\r\n\r\n  @IsString()\r\n  public description: string;\r\n\r\n  @IsNotEmpty()\r\n  public projectId: number;\r\n\r\n  @IsNotEmpty()\r\n  public statusId: number;\r\n\r\n  @IsNumber()\r\n  @IsOptional()\r\n  public fromIssueId: number;\r\n\r\n  public creatorId: number;\r\n\r\n  public assignees: number[];\r\n\r\n\r\n}\r\n","import { UserSummaryDto, CommentSummaryDto, ProjectSummaryDto, StatusSummaryDto, IssueSummaryDto } from \"@models/dtos\";\r\n\r\nexport class TaskDetailDto {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n    creator: UserSummaryDto;\r\n    comments: CommentSummaryDto[] = [];\r\n    project: ProjectSummaryDto;\r\n    status: StatusSummaryDto;\r\n    fromIssue: IssueSummaryDto;\r\n    assignees: UserSummaryDto[] = [];\r\n    commentCount: number = 0;\r\n}\r\n","import { UserSummaryDto, StatusSummaryDto, ProjectSummaryDto } from \"..\";\r\n\r\nexport class TaskListDto {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  creator: UserSummaryDto;\r\n  commentCount: number;\r\n  project: ProjectSummaryDto;\r\n  status: StatusSummaryDto;\r\n  assignees: UserSummaryDto[] = [];\r\n  subTaskCount?: number;\r\n}\r\n","import { IsNumber } from \"class-validator\";\r\n\r\nexport class TaskStatusUpdateDto {\r\n    @IsNumber()\r\n    public statusId: string;\r\n}\r\n","import { UserSummaryDto, ProjectSummaryDto, StatusSummaryDto } from \"@models/dtos\";\r\n\r\nexport class TaskSummaryDto {\r\n    id: number;\r\n    title: string;\r\n    description: string;\r\n    creator: UserSummaryDto;\r\n    project: ProjectSummaryDto;\r\n    status: StatusSummaryDto;\r\n    assignees: UserSummaryDto[] = [];\r\n    comentCount: number = 0;\r\n}\r\n","import { IsString } from 'class-validator';\r\n\r\nexport class TaskUpdateDto {\r\n\r\n  @IsString()\r\n  public title: string;\r\n\r\n  @IsString()\r\n  public description: string;\r\n\r\n}\r\n","import { IsString, IsEmail } from 'class-validator';\r\n\r\nexport class LoginDto {\r\n    @IsEmail()\r\n    public email: string;\r\n\r\n    @IsString()\r\n    public password: string;\r\n}\r\n","import { IsString, IsEmail, Length } from 'class-validator';\r\n\r\nexport class RegisterDto {\r\n\r\n    @Length(2, 20)\r\n    public name: string;\r\n\r\n    @Length(2, 20)\r\n    public surname: string;\r\n\r\n    @Length(5, 20)\r\n    public username: string;\r\n\r\n    @IsEmail()\r\n    public email: string;\r\n\r\n    @IsString()\r\n    public password: string;\r\n\r\n}\r\n","export class UserSummaryDto {\r\n    id: number;\r\n    name: string;\r\n    surname: string;\r\n    username: string;\r\n}\r\n","export class ProjectTreeItem {\r\n    id: number;\r\n    title: string;\r\n    statuses: StatusTreeItem[];\r\n    statusId?:number;\r\n}\r\n\r\nexport class StatusTreeItem {\r\n    id: number;\r\n    title: string;\r\n    projects: ProjectTreeItem[];\r\n    tasks: TaskTreeItem[];\r\n}\r\n\r\nexport class TaskTreeItem {\r\n    id: number;\r\n    statusId:number;\r\n    title: string;\r\n}","import * as bodyParser from 'body-parser';\r\nimport * as compression from 'compression';\r\nimport * as cors from 'cors';\r\nimport * as errorHandler from 'errorhandler';\r\nimport * as express from 'express';\r\nimport * as expressStatusMonitor from 'express-status-monitor';\r\nimport * as helmet from 'helmet';\r\nimport * as methodOverride from 'method-override';\r\nimport * as morgan from 'morgan';\r\nimport * as path from 'path';\r\nimport { createConnection } from \"typeorm\";\r\nimport { RouteBinder } from '@routes'\r\nimport { IOC } from '@ioc';\r\nimport * as appConfig from \"@common/app-config\";\r\n// import { logger } from './services';\r\nimport 'reflect-metadata';\r\n/**\r\n * The server.\r\n *\r\n * @class Server\r\n */\r\nexport class Server {\r\n    /**\r\n     * Bootstrap the application.\r\n     *\r\n     * @class Server\r\n     * @method bootstrap\r\n     * @static\r\n     */\r\n    public static bootstrap(): Server {\r\n        return new Server();\r\n    }\r\n    public app: express.Application;\r\n\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @class Server\r\n     * @constructor\r\n     */\r\n    constructor() {\r\n\r\n        IOC.configureContainer();\r\n\r\n        // create expressjs application\r\n        this.app = express();\r\n        // configure application\r\n        this.config();\r\n\r\n        // add routes\r\n        RouteBinder.configureRoutes(this.app);\r\n\r\n    }\r\n\r\n    /**\r\n     * Configure application\r\n     *\r\n     * @class Server\r\n     * @method config\r\n     */\r\n    public config() {\r\n        // add static paths\r\n        this.app.use(express.static(path.join(__dirname, 'public')));\r\n\r\n        // mount logger\r\n        // this.app.use(morgan('tiny', {\r\n        //   stream: {\r\n        //     write: (message: string) => logger.info(message.trim()),\r\n        //   },\r\n        // } as morgan.Options));\r\n        this.app.use(morgan('dev'));\r\n\r\n        // mount json form parser\r\n        this.app.use(bodyParser.json({ limit: '50mb' }));\r\n\r\n        // mount query string parser\r\n        this.app.use(bodyParser.urlencoded({\r\n            extended: true,\r\n        }));\r\n\r\n        // mount override?\r\n        this.app.use(helmet());\r\n        this.app.use(cors());\r\n        this.app.use(compression());\r\n        this.app.use(methodOverride());\r\n        this.app.use(expressStatusMonitor());\r\n\r\n        // catch 404 and forward to error handler\r\n        this.app.use((err: any, req: express.Request, res: express.Response, next: express.NextFunction) => {\r\n            err.status = 404;\r\n            next(err);\r\n        });\r\n\r\n        // error handling\r\n        this.app.use(errorHandler());\r\n\r\n        createConnection(appConfig.dbOptions).then(async connection => {\r\n            console.log(\"SERVER STARTED\")\r\n\r\n\r\n        }).catch(error => console.log(\"TypeORM connection error: \", error));\r\n    }\r\n}\r\n","import { StatusEntity } from '@entities/status.entity';\r\nimport { IssueEntity } from '@entities/issue.entity';\r\nimport { AnswerEntity } from '@entities/answer.entity';\r\nimport { QuestionEntity } from '@entities/question.entity';\r\nimport { CompanyEntity } from '@entities/company.entity';\r\nimport { ProjectEntity } from '@entities/project.entity';\r\nimport { CompanyMembershipEntity } from '@entities/company-membership.entity';\r\nimport { MembershipRequestEntity } from '@entities/membership-request.entity';\r\nimport { ProjectManagerEntity } from '@entities/project-manager.entity';\r\nimport { ProjectMembershipEntity } from '@entities/project-membership.entity';\r\nimport { TaskAssignmentEntity } from '@entities/task-assignment.entity';\r\nimport { TaskEntity } from '@entities/task.entity';\r\nimport { CommentEntity } from '@entities/comment.entity';\r\nimport { UserEntity } from '@entities/user.entity';\r\nimport { LabelEntity } from '@entities/label.entity';\r\nimport { TaskLabelEntity } from '@entities/task-label.entity';\r\nimport { StatusTemplateEntity } from '@entities/status-template.entity';\r\nimport { AbstractStatusEntity } from '@entities/abstract-status.entity';\r\n\r\nimport { ConnectionOptions } from \"typeorm\";\r\nimport 'reflect-metadata';\r\n\r\n\r\n\r\nexport let dbOptions: ConnectionOptions = {\r\n    type: \"mysql\",\r\n    host: \"localhost\",\r\n    port: 3306,\r\n    username: \"root\",\r\n    password: \"123456\",\r\n    database: \"pyudb\",\r\n    entities: [\r\n        TaskEntity,\r\n        CommentEntity,\r\n        UserEntity,\r\n        ProjectEntity,\r\n        CompanyEntity,\r\n        QuestionEntity,\r\n        AnswerEntity,\r\n        IssueEntity,\r\n        StatusEntity,\r\n        CompanyMembershipEntity,\r\n        MembershipRequestEntity,\r\n        ProjectManagerEntity,\r\n        ProjectMembershipEntity,\r\n        TaskAssignmentEntity,\r\n        LabelEntity,\r\n        AbstractStatusEntity,\r\n        StatusTemplateEntity,\r\n        TaskLabelEntity,\r\n    ],\r\n    synchronize: true,\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, JoinColumn } from \"typeorm\";\r\nimport { StatusTemplateEntity } from \"./status-template.entity\";\r\n@Entity(\"abstract_status\")\r\nexport class AbstractStatusEntity {\r\n\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column({\r\n      length: 100\r\n  })\r\n  title: string;\r\n\r\n  @Column({\r\n      length: 100\r\n  })\r\n  description: string;\r\n\r\n  @Column(\"int\")\r\n  baseStatus: number;\r\n\r\n  @Column(\"int\")\r\n  order: number;\r\n\r\n  @Column(\"int\")\r\n  templateId: number;\r\n  @ManyToOne(type => StatusTemplateEntity, stTemp => stTemp.statuses)\r\n  @JoinColumn({ name: \"templateId\" })\r\n  template: StatusTemplateEntity;\r\n\r\n  @Column()\r\n  createdAt: Date;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, OneToMany, ManyToOne, JoinColumn } from \"typeorm\";\r\nimport { UserEntity } from '@entities/user.entity';\r\nimport { QuestionEntity } from '@entities/question.entity';\r\n@Entity(\"answer\")\r\nexport class AnswerEntity {\r\n\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column({\r\n        length: 100\r\n    })\r\n    content: string;\r\n\r\n    @Column(\"int\")\r\n    creatorId: number;\r\n    @ManyToOne(type => UserEntity, user => user.answers)\r\n    @JoinColumn({ name: \"creatorId\" })\r\n    creator: UserEntity;\r\n\r\n    @Column(\"int\")\r\n    questionId: number;\r\n    @ManyToOne(type => QuestionEntity, question => question.answers)\r\n    @JoinColumn({ name: \"questionId\" })\r\n    question: QuestionEntity;\r\n\r\n    @Column()\r\n    createdAt: Date;\r\n\r\n    @Column()\r\n    lastUpdated: Date;\r\n}\r\n","import { TaskEntity } from '@entities/task.entity';\r\nimport { Entity, Column, PrimaryGeneratedColumn, ManyToOne, JoinColumn } from \"typeorm\";\r\nimport { UserEntity } from '@entities/user.entity';\r\n\r\n@Entity(\"comment\")\r\nexport class CommentEntity {\r\n\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column({\r\n        length: 400\r\n    })\r\n    content: string;\r\n\r\n    @Column(\"int\")\r\n    taskId: number;\r\n    @ManyToOne(type => TaskEntity, task => task.comments)\r\n    @JoinColumn({ name: \"taskId\" })\r\n    task: TaskEntity;\r\n\r\n    @Column(\"int\")\r\n    userId: number;\r\n    @ManyToOne(type => UserEntity, user => user.comments)\r\n    @JoinColumn({ name: \"userId\" })\r\n    creator: UserEntity;\r\n\r\n    @Column()\r\n    createdAt: Date;\r\n\r\n    @Column()\r\n    lastUpdated: Date;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, JoinColumn } from \"typeorm\";\r\nimport { UserEntity } from '@entities/user.entity';\r\nimport { CompanyEntity } from \"@entities/company.entity\";\r\n\r\n@Entity(\"company_membership\")\r\nexport class CompanyMembershipEntity {\r\n\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column(\"int\")\r\n    userId: number;\r\n    @ManyToOne(type => UserEntity, user => user.memberships)\r\n    @JoinColumn({ name: \"userId\" })\r\n    user: UserEntity;\r\n\r\n    @Column(\"int\")\r\n    companyId: number;\r\n    @ManyToOne(type => CompanyEntity, company => company.members)\r\n    @JoinColumn({ name: \"companyId\" })\r\n    company: CompanyEntity;\r\n\r\n    @Column(\"datetime\")\r\n    joiningDate: Date;\r\n\r\n    @Column(\"datetime\", { nullable: true })\r\n    leavingDate: Date;\r\n\r\n    @Column(\"int\")\r\n    status: number;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, OneToMany, ManyToOne, JoinColumn, ManyToMany, JoinTable } from \"typeorm\";\r\nimport { UserEntity } from '@entities/user.entity';\r\nimport { CompanyMembershipEntity } from \"@entities/company-membership.entity\";\r\nimport { MembershipRequestEntity } from \"@entities/membership-request.entity\";\r\nimport { StatusTemplateEntity } from \"./status-template.entity\";\r\nimport { ProjectEntity } from \"./project.entity\";\r\n@Entity(\"company\")\r\nexport class CompanyEntity {\r\n\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column({\r\n    length: 100\r\n  })\r\n  name: string;\r\n\r\n  @Column({\r\n    length: 100\r\n  })\r\n  description: string;\r\n\r\n  @OneToMany(type => ProjectEntity, prj => prj.company)\r\n  projects: ProjectEntity[];\r\n\r\n  @OneToMany(type => CompanyMembershipEntity, cmem => cmem.company)\r\n  members: CompanyMembershipEntity[];\r\n\r\n  @OneToMany(type => MembershipRequestEntity, msr => msr.company)\r\n  requestsSent: MembershipRequestEntity[];\r\n\r\n  @OneToMany(type => StatusTemplateEntity, stTemp => stTemp.company)\r\n  statusTemplates: StatusTemplateEntity[];\r\n\r\n  @Column(\"int\")\r\n  ownerId: number;\r\n  @ManyToOne(type => UserEntity, user => user.ownedCompanies)\r\n  @JoinColumn({ name: \"ownerId\" })\r\n  owner: UserEntity;\r\n\r\n  @Column()\r\n  createdAt: Date;\r\n\r\n  @Column()\r\n  lastUpdated: Date;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, OneToMany, ManyToOne, JoinColumn } from \"typeorm\";\r\nimport { UserEntity } from '@entities/user.entity';\r\nimport { TaskEntity } from '@entities/task.entity';\r\nimport { ProjectEntity } from \"./project.entity\";\r\n@Entity(\"issue\")\r\nexport class IssueEntity {\r\n\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column({\r\n        length: 100\r\n    })\r\n    title: string;\r\n\r\n    @Column({\r\n        length: 100\r\n    })\r\n    description: string;\r\n\r\n    @OneToMany(type => TaskEntity, task => task.fromIssue)\r\n    tasks: TaskEntity[];\r\n\r\n    @Column(\"int\")\r\n    creatorId: number;\r\n    @ManyToOne(type => UserEntity, user => user.createdIssues)\r\n    @JoinColumn({ name: \"creatorId\" })\r\n    creator: UserEntity;\r\n\r\n    @Column(\"int\")\r\n    projectId: number;\r\n    @ManyToOne(type => ProjectEntity, prj => prj.issues)\r\n    @JoinColumn({ name: \"projectId\" })\r\n    project: ProjectEntity;\r\n\r\n    @Column()\r\n    createdAt: Date;\r\n\r\n    @Column()\r\n    lastUpdated: Date;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, OneToMany } from \"typeorm\";\r\nimport { TaskLabelEntity } from './task-label.entity';\r\n@Entity(\"label\")\r\nexport class LabelEntity {\r\n\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column({\r\n        length: 15\r\n    })\r\n    name: string;\r\n\r\n    @OneToMany(type => TaskLabelEntity, tsklbl => tsklbl.label)\r\n    relatedTasks: TaskLabelEntity[];\r\n\r\n    @Column()\r\n    createdAt: Date;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, JoinColumn } from \"typeorm\";\r\nimport { UserEntity } from '@entities/user.entity';\r\nimport { CompanyEntity } from \"@entities/company.entity\";\r\n\r\n@Entity(\"membership_request\")\r\nexport class MembershipRequestEntity {\r\n\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column(\"int\")\r\n    userId: number;\r\n    @ManyToOne(type => UserEntity, user => user.companyRequests)\r\n    @JoinColumn({ name: \"userId\" })\r\n    user: UserEntity;\r\n\r\n    @Column(\"int\")\r\n    companyId: number;\r\n    @ManyToOne(type => CompanyEntity, company => company.requestsSent)\r\n    @JoinColumn({ name: \"companyId\" })\r\n    company: CompanyEntity;\r\n\r\n    @Column()\r\n    createdAt: Date;\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, JoinColumn } from \"typeorm\";\r\nimport { UserEntity } from '@entities/user.entity';\r\nimport { ProjectEntity } from \"./project.entity\";\r\n\r\n@Entity(\"project_manager\")\r\nexport class ProjectManagerEntity {\r\n\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column(\"int\")\r\n    userId: number;\r\n    @ManyToOne(type => UserEntity, user => user.managedProjects)\r\n    @JoinColumn({ name: \"userId\" })\r\n    user: UserEntity;\r\n\r\n    @Column(\"int\")\r\n    projectId: number;\r\n    @ManyToOne(type => ProjectEntity, prj => prj.managers)\r\n    @JoinColumn({ name: \"projectId\" })\r\n    project: ProjectEntity;\r\n\r\n    @Column()\r\n    createdAt: Date;\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, JoinColumn } from \"typeorm\";\r\nimport { UserEntity } from '@entities/user.entity';\r\nimport { ProjectEntity } from \"@entities/project.entity\";\r\n\r\n@Entity(\"project_membership\")\r\nexport class ProjectMembershipEntity {\r\n\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column(\"int\")\r\n    userId: number;\r\n    @ManyToOne(type => UserEntity, user => user.projectMemberships)\r\n    @JoinColumn({ name: \"userId\" })\r\n    user: UserEntity;\r\n\r\n    @Column(\"int\")\r\n    projectId: number;\r\n    @ManyToOne(type => ProjectEntity, rt => rt.managers)\r\n    @JoinColumn({ name: \"projectId\" })\r\n    project: ProjectEntity;\r\n\r\n    @Column()\r\n    createdAt: Date;\r\n\r\n}\r\n","import { Entity, PrimaryGeneratedColumn, OneToMany, Column, OneToOne, ManyToOne, JoinColumn, Tree, TreeChildren, TreeParent, } from \"typeorm\";\r\nimport { TaskEntity } from \"@entities/task.entity\";\r\nimport { StatusEntity } from \"@entities/status.entity\";\r\nimport { IssueEntity } from \"./issue.entity\";\r\nimport { CompanyEntity } from \"./company.entity\";\r\nimport { UserEntity } from \"./user.entity\";\r\nimport { ProjectMembershipEntity } from \"./project-membership.entity\";\r\nimport { ProjectManagerEntity } from \"./project-manager.entity\";\r\nimport { QuestionEntity } from \"./question.entity\";\r\n\r\n@Entity(\"project\")\r\nexport class ProjectEntity {\r\n\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column({ length: 300 })\r\n  title: string;\r\n\r\n  @Column({ length: 300 })\r\n  description: string;\r\n\r\n  @Column({ length: 3 })\r\n  prefix: string;\r\n\r\n  @Column()\r\n  createdAt: Date;\r\n\r\n  @Column()\r\n  lastUpdated: Date;\r\n\r\n  @Column(\"int\")\r\n  companyId: number;\r\n  @ManyToOne(type => CompanyEntity, company => company.projects)\r\n  @JoinColumn({ name: \"companyId\" })\r\n  company: CompanyEntity;\r\n\r\n  @Column(\"int\")\r\n  creatorId: number;\r\n  @ManyToOne(type => UserEntity, user => user.createdProjects)\r\n  @JoinColumn({ name: \"creatorId\" })\r\n  creator: UserEntity;\r\n\r\n  @OneToMany(type => ProjectEntity, prj => prj.parent)\r\n  children: ProjectEntity[];\r\n\r\n  @Column(\"int\", { nullable: true })\r\n  statusId: number;\r\n  @ManyToOne(type => StatusEntity, status => status.projects)\r\n  @JoinColumn({ name: \"statusId\" })\r\n  status: StatusEntity;\r\n\r\n  @Column(\"int\", { nullable: true })\r\n  parentId: number;\r\n  @ManyToOne(type => ProjectEntity, prj => prj.children)\r\n  @JoinColumn({ name: \"parentId\" })\r\n  parent: ProjectEntity;\r\n\r\n  @OneToMany(type => IssueEntity, issue => issue.project)\r\n  issues: IssueEntity[];\r\n\r\n  @OneToMany(type => TaskEntity, task => task.project)\r\n  tasks: TaskEntity[];\r\n\r\n  @OneToMany(type => StatusEntity, status => status.project)\r\n  statuses: StatusEntity[];\r\n\r\n  @OneToMany(type => ProjectMembershipEntity, pms => pms.project)\r\n  members: ProjectMembershipEntity[];\r\n\r\n  @OneToMany(type => ProjectManagerEntity, prm => prm.project)\r\n  managers: ProjectManagerEntity[];\r\n\r\n  @OneToMany(type => QuestionEntity, question => question.project)\r\n  questions: QuestionEntity[];\r\n}\r\n","import { ProjectEntity } from '@entities/project.entity';\r\nimport { Entity, Column, PrimaryGeneratedColumn, OneToMany, ManyToOne, JoinColumn } from \"typeorm\";\r\nimport { UserEntity } from '@entities/user.entity';\r\nimport { AnswerEntity } from '@entities/answer.entity';\r\n@Entity(\"question\")\r\nexport class QuestionEntity {\r\n\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column({\r\n        length: 100\r\n    })\r\n    title: string;\r\n\r\n    @Column({\r\n        length: 100\r\n    })\r\n    content: string;\r\n\r\n    @OneToMany(type => AnswerEntity, answer => answer.question)\r\n    answers: AnswerEntity[];\r\n\r\n    @Column(\"int\")\r\n    creatorId: number;\r\n    @ManyToOne(type => UserEntity, user => user.questions)\r\n    @JoinColumn({ name: \"creatorId\" })\r\n    creator: UserEntity;\r\n\r\n    @Column(\"int\")\r\n    projectId: number;\r\n    @ManyToOne(type => ProjectEntity, project => project.questions)\r\n    @JoinColumn({ name: \"projectId\" })\r\n    project: ProjectEntity;\r\n\r\n    @Column()\r\n    createdAt: Date;\r\n\r\n    @Column()\r\n    lastUpdated: Date;\r\n    rootProject: any;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, OneToMany, ManyToOne, JoinColumn } from \"typeorm\";\r\nimport { UserEntity } from '@entities/user.entity';\r\nimport { CompanyEntity } from './company.entity';\r\nimport { AbstractStatusEntity } from './abstract-status.entity';\r\n@Entity(\"status_template\")\r\nexport class StatusTemplateEntity {\r\n\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column({\r\n    length: 100\r\n  })\r\n  name: string;\r\n\r\n  @OneToMany(type => AbstractStatusEntity, abst => abst.template)\r\n  statuses:AbstractStatusEntity[];\r\n\r\n  @Column(\"int\")\r\n  creatorId: number;\r\n  @ManyToOne(type => UserEntity, user => user.createdstatusTemplates)\r\n  @JoinColumn({ name: \"creatorId\" })\r\n  creator: UserEntity;\r\n\r\n  @Column(\"int\")\r\n  companyId: number;\r\n  @ManyToOne(type => CompanyEntity, cmp => cmp.statusTemplates)\r\n  @JoinColumn({ name: \"companyId\" })\r\n  company: CompanyEntity;\r\n\r\n  @Column()\r\n  createdAt: Date;\r\n\r\n  @Column()\r\n  lastUpdated: Date;\r\n}\r\n","import { TaskEntity } from '@entities/task.entity';\r\nimport { ProjectEntity } from '@entities/project.entity';\r\nimport { Entity, Column, PrimaryGeneratedColumn, OneToMany, ManyToOne, JoinColumn } from \"typeorm\";\r\nimport { UserEntity } from '@entities/user.entity';\r\n@Entity(\"status\")\r\nexport class StatusEntity {\r\n\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column({\r\n        length: 100\r\n    })\r\n    title: string;\r\n\r\n    @Column({\r\n        length: 100\r\n    })\r\n    description: string;\r\n\r\n    @Column(\"int\")\r\n    baseStatus: number;\r\n\r\n    @Column(\"int\")\r\n    order: number;\r\n\r\n    @OneToMany(type => TaskEntity, task => task.status)\r\n    tasks: TaskEntity[];\r\n\r\n    @OneToMany(type => ProjectEntity, prj => prj.status)\r\n    projects: ProjectEntity[];\r\n\r\n    @Column(\"int\")\r\n    creatorId: number;\r\n    @ManyToOne(type => UserEntity, user => user.createdStatuses)\r\n    @JoinColumn({ name: \"creatorId\" })\r\n    creator: UserEntity;\r\n\r\n    @Column(\"int\")\r\n    projectId: number;\r\n    @ManyToOne(type => ProjectEntity, project => project.statuses)\r\n    @JoinColumn({ name: \"projectId\" })\r\n    project: ProjectEntity;\r\n\r\n    @Column()\r\n    createdAt: Date;\r\n\r\n    @Column()\r\n    lastUpdated: Date;\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, JoinColumn } from \"typeorm\";\r\nimport { UserEntity } from '@entities/user.entity';\r\nimport { TaskEntity } from \"@entities/task.entity\";\r\n\r\n@Entity(\"task_assignment\")\r\nexport class TaskAssignmentEntity {\r\n\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column(\"int\")\r\n    userId: number;\r\n    @ManyToOne(type => UserEntity, user => user.taskAssignments)\r\n    @JoinColumn({ name: \"userId\" })\r\n    user: UserEntity;\r\n\r\n    @Column(\"int\")\r\n    taskId: number;\r\n    @ManyToOne(type => TaskEntity, tsk => tsk.assignees)\r\n    @JoinColumn({ name: \"taskId\" })\r\n    task: TaskEntity;\r\n\r\n    @Column()\r\n    createdAt: Date;\r\n\r\n}\r\n","import { Entity, Column, PrimaryGeneratedColumn, ManyToOne, JoinColumn } from \"typeorm\";\r\nimport { TaskEntity } from \"@entities/task.entity\";\r\nimport { LabelEntity } from \"./label.entity\";\r\n\r\n@Entity(\"task_label\")\r\nexport class TaskLabelEntity {\r\n\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column(\"int\")\r\n    taskId: number;\r\n    @ManyToOne(type => TaskEntity, task => task.relatedLabels)\r\n    @JoinColumn({ name: \"taskId\" })\r\n    task: TaskEntity;\r\n\r\n    @Column(\"int\")\r\n    labelId: number;\r\n    @ManyToOne(type => LabelEntity, lbl => lbl.relatedTasks)\r\n    @JoinColumn({ name: \"labelId\" })\r\n    label: TaskEntity;\r\n}\r\n","import { IssueEntity } from '@entities/issue.entity';\r\nimport { ProjectEntity } from '@entities/project.entity';\r\nimport { Entity, Column, PrimaryGeneratedColumn, OneToMany, ManyToOne, JoinColumn, ManyToMany, JoinTable, OneToOne } from \"typeorm\";\r\nimport { CommentEntity } from '@entities/comment.entity';\r\nimport { UserEntity } from '@entities/user.entity';\r\nimport { StatusEntity } from '@entities/status.entity';\r\nimport { TaskAssignmentEntity } from '@entities/task-assignment.entity';\r\nimport { TaskLabelEntity } from './task-label.entity';\r\n@Entity(\"task\")\r\nexport class TaskEntity {\r\n\r\n  @PrimaryGeneratedColumn()\r\n  id: number;\r\n\r\n  @Column({\r\n    length: 100\r\n  })\r\n  title: string;\r\n\r\n  @Column({\r\n    length: 100\r\n  })\r\n  description: string;\r\n  //\r\n  // @Column(\"int\")\r\n  // type: number;\r\n\r\n  @Column(\"int\")\r\n  code: number;\r\n\r\n  @Column(\"int\")\r\n  priority: number;\r\n\r\n  @OneToMany(type => CommentEntity, comment => comment.task)\r\n  comments: CommentEntity[];\r\n\r\n  @Column(\"int\")\r\n  creatorId: number;\r\n  @ManyToOne(type => UserEntity, user => user.createdTasks)\r\n  @JoinColumn({ name: \"creatorId\" })\r\n  creator: UserEntity;\r\n\r\n  @Column(\"int\")\r\n  projectId: number;\r\n  @ManyToOne(type => ProjectEntity, project => project.tasks)\r\n  @JoinColumn({ name: \"projectId\" })\r\n  project: ProjectEntity;\r\n\r\n  @Column(\"int\")\r\n  statusId: number;\r\n  @ManyToOne(type => StatusEntity, status => status.tasks)\r\n  @JoinColumn({ name: \"statusId\" })\r\n  status: StatusEntity;\r\n\r\n  @Column(\"int\", { nullable: true })\r\n  fromIssueId: number;\r\n  @ManyToOne(type => IssueEntity, issue => issue.tasks)\r\n  @JoinColumn({ name: \"fromIssueId\" })\r\n  fromIssue: IssueEntity;\r\n\r\n  @OneToMany(type => TaskAssignmentEntity, tsa => tsa.task)\r\n  assignees: TaskAssignmentEntity[];\r\n\r\n  @OneToMany(type => TaskLabelEntity, tsklbl => tsklbl.task)\r\n  relatedLabels: TaskLabelEntity[];\r\n\r\n  @Column()\r\n  createdAt: Date;\r\n\r\n  @Column()\r\n  lastUpdated: Date;\r\n}\r\n","import { IssueEntity } from '@entities/issue.entity';\r\nimport { CommentEntity } from '@entities/comment.entity';\r\nimport { QuestionEntity } from '@entities/question.entity';\r\nimport { CompanyEntity } from '@entities/company.entity';\r\nimport { TaskEntity } from '@entities/task.entity';\r\nimport { Entity, Column, PrimaryGeneratedColumn, OneToMany } from \"typeorm\";\r\nimport { AnswerEntity } from '@entities/answer.entity';\r\nimport { StatusEntity } from '@entities/status.entity';\r\nimport { ProjectManagerEntity } from '@entities/project-manager.entity';\r\nimport { MembershipRequestEntity } from '@entities/membership-request.entity';\r\nimport { ProjectMembershipEntity } from '@entities/project-membership.entity';\r\nimport { TaskAssignmentEntity } from '@entities/task-assignment.entity';\r\nimport { CompanyMembershipEntity } from '@entities/company-membership.entity';\r\nimport { StatusTemplateEntity } from './status-template.entity';\r\nimport { ProjectEntity } from './project.entity';\r\n\r\n@Entity(\"user\")\r\nexport class UserEntity {\r\n\r\n    @PrimaryGeneratedColumn()\r\n    id: number;\r\n\r\n    @Column({\r\n        length: 100\r\n    })\r\n    name: string;\r\n\r\n    @Column({\r\n        length: 100\r\n    })\r\n    surname: string;\r\n\r\n    @Column({\r\n        length: 100\r\n    })\r\n    username: string;\r\n\r\n    @Column({\r\n        length: 100\r\n    })\r\n    email: string;\r\n\r\n    @Column({\r\n        length: 100\r\n    })\r\n    password: string;\r\n\r\n    @Column()\r\n    createdAt: Date;\r\n\r\n    @Column()\r\n    lastUpdated: Date;\r\n\r\n    @OneToMany(type => TaskEntity, task => task.creator)\r\n    createdTasks: TaskEntity[];\r\n\r\n    @OneToMany(type => ProjectEntity, project => project.creator)\r\n    createdProjects: ProjectEntity[];\r\n\r\n    @OneToMany(type => CompanyEntity, company => company.owner)\r\n    ownedCompanies: CompanyEntity[];\r\n\r\n    @OneToMany(type => QuestionEntity, question => question.creator)\r\n    questions: QuestionEntity[];\r\n\r\n    @OneToMany(type => StatusTemplateEntity, stTemp => stTemp.creator)\r\n    createdstatusTemplates: StatusTemplateEntity[];\r\n\r\n    @OneToMany(type => AnswerEntity, answer => answer.creator)\r\n    answers: AnswerEntity[];\r\n\r\n    @OneToMany(type => CommentEntity, comment => comment.creator)\r\n    comments: CommentEntity[];\r\n\r\n    @OneToMany(type => IssueEntity, issue => issue.creator)\r\n    createdIssues: IssueEntity[];\r\n\r\n    @OneToMany(type => StatusEntity, status => status.creator)\r\n    createdStatuses: StatusEntity[];\r\n\r\n    @OneToMany(type => CompanyMembershipEntity, cmem => cmem.user)\r\n    memberships: CompanyMembershipEntity[];\r\n\r\n    @OneToMany(type => MembershipRequestEntity, msr => msr.user)\r\n    companyRequests: MembershipRequestEntity[];\r\n\r\n    @OneToMany(type => ProjectMembershipEntity, pms => pms.user)\r\n    projectMemberships: ProjectMembershipEntity[];\r\n\r\n    @OneToMany(type => ProjectManagerEntity, pmn => pmn.user)\r\n    managedProjects: ProjectManagerEntity[];\r\n\r\n    @OneToMany(type => TaskAssignmentEntity, tsa => tsa.user)\r\n    taskAssignments: TaskAssignmentEntity[];\r\n\r\n}\r\n","export class AppError extends Error {\r\n    status: number;\r\n    constructor(\r\n        name: string,\r\n        message: string,\r\n        status?: number\r\n    ) {\r\n        super(message);\r\n        this.name = name;\r\n        Error.captureStackTrace(this, this.constructor);\r\n        this.status = status || 500;\r\n    }\r\n}","import { Helpers } from \"../helpers\";\r\nimport { AppError } from \"./app-error\";\r\n\r\nexport module ErrorHandler {\r\n    export function handleErrorResponses(error: Error, res, Method: string = 'unknown', Controller: string = 'unknown') {\r\n        let status = 500;\r\n        let _errorMessage;\r\n        if (Helpers.isJson(error.message))\r\n            _errorMessage = JSON.parse(error.message);\r\n        else\r\n            _errorMessage = error.message;\r\n        if (error instanceof AppError) {\r\n            status = error.status;\r\n        }\r\n        console.log(`ERROR at Method: ${Method} , Controller: ${Controller}`);\r\n        console.log('Error Name :', error.name);\r\n        console.log('Error Message :', _errorMessage);\r\n        console.log('Error StackTrace :', error.stack);\r\n        return res.status(status).json({\r\n            success: false,\r\n            error: {\r\n                name: error.name,\r\n                message: _errorMessage\r\n            }\r\n        });\r\n    }\r\n\r\n}","export module Helpers {\r\n\r\n    export function isJson(item) {\r\n        item = typeof item !== \"string\"\r\n            ? JSON.stringify(item)\r\n            : item;\r\n\r\n        try {\r\n            item = JSON.parse(item);\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n\r\n        if (typeof item === \"object\" && item !== null) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n}\r\n","console.log(\"Starting...\")\r\nimport 'reflect-metadata';\r\nimport * as config from 'config';\r\n\r\nimport { Server } from './app';\r\n// const swaggerUi = require('swagger-ui-express');\r\n// import * as swaggerDocument from './swagger.json';\r\nexport const app = Server.bootstrap().app;\r\n\r\nexport const server = app.listen(config.get('port'), () => {\r\n});\r\n","export { InjectTypes } from './inject-types';\r\nexport { IOC } from './ioc.config';\r\n","export module InjectTypes {\r\n  export enum Repository {\r\n    ANSWER = 'AnswerRepository',\r\n    COMMENT = 'CommentRepository',\r\n    COMPANY = 'CompanyRepository',\r\n    ISSUE = 'IssueRepository',\r\n    PROJECT = 'ProjectRepository',\r\n    QUESTION = 'QuestionRepository',\r\n    STATUS = 'StatusRepository',\r\n    TASK = 'TaskRepository',\r\n    USER = 'UserRepository',\r\n    COMPANY_MEMBERSHIP = 'CompanyMembershipRepository',\r\n    MEMBERSHIP_REQUEST = 'MembershipRequestRepository',\r\n    TASK_ASSIGNMENT = 'TaskAssignmentRepository',\r\n    PROJECT_MEMBERSHIP = 'ProjectMembershipRepository',\r\n    LABEL = 'LabelRepository',\r\n    TASK_LABEL = 'TaskLabelRepository',\r\n    ABSTRACT_STATUS = 'AbstractStatusRepository',\r\n    STATUS_TEMPLATE = 'StatusTemplateRepository',\r\n    PROJECT_MANAGER = 'ProjectManagerRepository',\r\n  }\r\n\r\n  export enum Service {\r\n    ANSWER = 'AnswerService',\r\n    COMMENT = 'CommentService',\r\n    COMPANY = 'CompanyService',\r\n    ISSUE = 'IssueService',\r\n    QUESTION = 'QuestionService',\r\n    TASK = 'TaskService',\r\n    USER = 'UserService',\r\n    PROJECT = 'ProjectService'\r\n  }\r\n\r\n}\r\n","import 'module-alias/register';\r\n\r\nimport { AnswerController } from '@controllers/answer.controller';\r\nimport { CommentController } from '@controllers/comment.controller';\r\nimport { CompanyController } from '@controllers/company.controller';\r\nimport { IssueController } from '@controllers/issue.controller';\r\nimport { ProjectController } from '@controllers/project.controller';\r\nimport { QuestionController } from '@controllers/question.controller';\r\nimport { TaskController } from '@controllers/task.controller';\r\nimport { UserController } from '@controllers/user.controller';\r\nimport {\r\n  IAnswerRepository,\r\n  ICommentRepository,\r\n  ICompanyRepository,\r\n  IIssueRepository,\r\n  IProjectMembershipRepository,\r\n  IProjectRepository,\r\n  IQuestionRepository,\r\n  IStatusRepository,\r\n  ITaskAssignmentRepository,\r\n  ITaskRepository,\r\n  IUserRepository,\r\n  ICompanyMembershipRepository,\r\n  IMembershipRequestRepository,\r\n  ILabelRepository,\r\n  ITaskLabelRepository,\r\n  IStatusTemplateRepository,\r\n  IAbstractStatusRepository,\r\n  IProjectManagerRepository,\r\n} from '@repositories/abstract';\r\n\r\nimport {\r\n  AnswerRepository,\r\n  CommentRepository,\r\n  CompanyRepository,\r\n  IssueRepository,\r\n  ProjectMembershipRepository,\r\n  ProjectRepository,\r\n  QuestionRepository,\r\n  StatusRepository,\r\n  TaskAssignmentRepository,\r\n  TaskRepository,\r\n  UserRepository,\r\n  CompanyMembershipRepository,\r\n  MembershipRequestRepository,\r\n  LabelRepository,\r\n  TaskLabelRepository,\r\n  StatusTemplateRepository,\r\n  AbstractStatusRepository,\r\n  ProjectManagerRepository,\r\n} from '@repositories/concrete';\r\n\r\nimport {\r\n  AnswerService,\r\n  CommentService,\r\n  CompanyService,\r\n  IssueService,\r\n  QuestionService,\r\n  TaskService,\r\n  UserService,\r\n  ProjectService,\r\n} from '@services/concrete';\r\n\r\nimport {\r\n  IAnswerService,\r\n  ICommentService,\r\n  ICompanyService,\r\n  IIssueService,\r\n  IQuestionService,\r\n  ITaskService,\r\n  IUserService,\r\n  IProjectService\r\n} from '@services/abstract';\r\n\r\nimport { Container } from 'inversify';\r\n\r\nimport 'reflect-metadata';\r\nimport { InjectTypes } from '@ioc';\r\n\r\nexport module IOC {\r\n  export const container = new Container();\r\n  export function configureContainer(): Container {\r\n\r\n    //CONTROLLERS\r\n\r\n    container\r\n      .bind<AnswerController>(AnswerController)\r\n      .toSelf();\r\n\r\n    container\r\n      .bind<CommentController>(CommentController)\r\n      .toSelf();\r\n\r\n\r\n    container\r\n      .bind<CompanyController>(CompanyController)\r\n      .toSelf();\r\n\r\n    container\r\n      .bind<IssueController>(IssueController)\r\n      .toSelf();\r\n\r\n    container\r\n      .bind<ProjectController>(ProjectController)\r\n      .toSelf();\r\n\r\n    container\r\n      .bind<QuestionController>(QuestionController)\r\n      .toSelf();\r\n\r\n    container\r\n      .bind<TaskController>(TaskController)\r\n      .toSelf();\r\n\r\n    container\r\n      .bind<UserController>(UserController)\r\n      .toSelf();\r\n\r\n    // REPOSITORIES\r\n\r\n    container\r\n      .bind<IAnswerRepository>(InjectTypes.Repository.ANSWER)\r\n      .to(AnswerRepository);\r\n\r\n    container\r\n      .bind<ICommentRepository>(InjectTypes.Repository.COMMENT)\r\n      .to(CommentRepository);\r\n\r\n    container\r\n      .bind<ICompanyRepository>(InjectTypes.Repository.COMPANY)\r\n      .to(CompanyRepository);\r\n\r\n    container\r\n      .bind<ICompanyMembershipRepository>(InjectTypes.Repository.COMPANY_MEMBERSHIP)\r\n      .to(CompanyMembershipRepository);\r\n\r\n    container\r\n      .bind<IMembershipRequestRepository>(InjectTypes.Repository.MEMBERSHIP_REQUEST)\r\n      .to(MembershipRequestRepository);\r\n\r\n    container\r\n      .bind<IIssueRepository>(InjectTypes.Repository.ISSUE)\r\n      .to(IssueRepository);\r\n\r\n    container\r\n      .bind<IProjectMembershipRepository>(InjectTypes.Repository.PROJECT_MEMBERSHIP)\r\n      .to(ProjectMembershipRepository);\r\n\r\n    container\r\n      .bind<IProjectRepository>(InjectTypes.Repository.PROJECT)\r\n      .to(ProjectRepository);\r\n\r\n    container\r\n      .bind<IQuestionRepository>(InjectTypes.Repository.QUESTION)\r\n      .to(QuestionRepository);\r\n\r\n    container\r\n      .bind<IStatusRepository>(InjectTypes.Repository.STATUS)\r\n      .to(StatusRepository);\r\n\r\n    container\r\n      .bind<ITaskRepository>(InjectTypes.Repository.TASK)\r\n      .to(TaskRepository);\r\n\r\n    container\r\n      .bind<IUserRepository>(InjectTypes.Repository.USER)\r\n      .to(UserRepository);\r\n\r\n    container\r\n      .bind<ITaskAssignmentRepository>(InjectTypes.Repository.TASK_ASSIGNMENT)\r\n      .to(TaskAssignmentRepository)\r\n\r\n    container\r\n      .bind<ITaskLabelRepository>(InjectTypes.Repository.TASK_LABEL)\r\n      .to(TaskLabelRepository)\r\n\r\n    container\r\n      .bind<ILabelRepository>(InjectTypes.Repository.LABEL)\r\n      .to(LabelRepository)\r\n\r\n    container\r\n      .bind<IStatusTemplateRepository>(InjectTypes.Repository.STATUS_TEMPLATE)\r\n      .to(StatusTemplateRepository)\r\n\r\n    container\r\n      .bind<IAbstractStatusRepository>(InjectTypes.Repository.ABSTRACT_STATUS)\r\n      .to(AbstractStatusRepository)\r\n\r\n    container\r\n      .bind<IProjectManagerRepository>(InjectTypes.Repository.PROJECT_MANAGER)\r\n      .to(ProjectManagerRepository)\r\n\r\n    // SERVICES\r\n\r\n\r\n    container\r\n      .bind<IAnswerService>(InjectTypes.Service.ANSWER)\r\n      .to(AnswerService);\r\n\r\n    container\r\n      .bind<ICommentService>(InjectTypes.Service.COMMENT)\r\n      .to(CommentService);\r\n\r\n    container\r\n      .bind<ICompanyService>(InjectTypes.Service.COMPANY)\r\n      .to(CompanyService);\r\n\r\n    container\r\n      .bind<IIssueService>(InjectTypes.Service.ISSUE)\r\n      .to(IssueService);\r\n\r\n    container\r\n      .bind<IProjectService>(InjectTypes.Service.PROJECT)\r\n      .to(ProjectService);\r\n\r\n    container\r\n      .bind<IQuestionService>(InjectTypes.Service.QUESTION)\r\n      .to(QuestionService);\r\n\r\n    container\r\n      .bind<ITaskService>(InjectTypes.Service.TASK)\r\n      .to(TaskService);\r\n\r\n    container\r\n      .bind<IUserService>(InjectTypes.Service.USER)\r\n      .to(UserService);\r\n\r\n    return container;\r\n  }\r\n}\r\n","import { verify } from 'jsonwebtoken';\r\nexport function authorize(req, res, next): void {\r\n    let token: string = req.get('Authorization') || undefined;\r\n    if (token !== undefined) {\r\n        verify(token, 'MySecret', (err, decoded) => {\r\n            if (err) {\r\n                console.log('UnAuthorized Access');\r\n                return res.status(403).json({\r\n                    message: 'Error: Your token has expired',\r\n                    success: false\r\n                });\r\n            } else {\r\n                req.decoded = decoded;\r\n                next();\r\n            }\r\n        });\r\n    } else {\r\n        return res.status(403).json({\r\n            message: 'Error: You need to authenticate to access this part of the API',\r\n            success: false\r\n        });\r\n    }\r\n}\r\n","export { authorize } from \"./authorize.middleware\";\r\nexport { validationMiddleware } from \"./validation.middleware\";\r\n","import { plainToClass } from 'class-transformer';\r\nimport { validate, ValidationError } from 'class-validator';\r\nimport * as express from 'express';\r\nimport HttpException from '../exceptions/HttpException';\r\n\r\nexport function validationMiddleware<T>(type: any, skipMissingProperties = false): express.RequestHandler {\r\n  return (req, res, next) => {\r\n    validate(plainToClass(type, req.body), { skipMissingProperties })\r\n      .then((errors: ValidationError[]) => {\r\n        if (errors.length > 0) {\r\n          const message = errors.map((error: ValidationError) => Object.values(error.constraints)).join(', ');\r\n          return res.status(422).json({\r\n              message: message,\r\n              success: false\r\n          });\r\n        } else {\r\n          next();\r\n        }\r\n      });\r\n  };\r\n}\r\n","module.exports = require(\"body-parser\");","module.exports = require(\"class-transformer\");","module.exports = require(\"class-validator\");","module.exports = require(\"compression\");","module.exports = require(\"config\");","module.exports = require(\"cors\");","module.exports = require(\"errorhandler\");","module.exports = require(\"express\");","module.exports = require(\"express-status-monitor\");","module.exports = require(\"helmet\");","module.exports = require(\"inversify\");","module.exports = require(\"jsonwebtoken\");","module.exports = require(\"lodash\");","module.exports = require(\"method-override\");","module.exports = require(\"module-alias/register\");","module.exports = require(\"morgan\");","module.exports = require(\"path\");","module.exports = require(\"reflect-metadata\");","module.exports = require(\"typeorm\");"],"sourceRoot":""}